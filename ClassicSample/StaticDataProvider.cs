/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 27.06.2018 13:13:08
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.ComponentModel;
using System.Reflection;
using System.Windows.Data;

namespace Awsd5.ClassicSample
{
	public class StaticDataProvider : DataSourceProvider
	{
		private Type _objectType;
		private string _propertyName;
		public Type ObjectType
		{
			get { return _objectType; }
			set
			{
				if(value == _objectType) return;
				_objectType = value;
					OnPropertyChanged(new PropertyChangedEventArgs("ObjectType"));
					if(!base.IsRefreshDeferred) base.Refresh();
			}
		}
		
		public string PropertyName
		{
			get { return _propertyName; }
			set
			{
				if(value == _propertyName) return;
				_propertyName = value;
				OnPropertyChanged(new PropertyChangedEventArgs("PropertyName"));
				if(!base.IsRefreshDeferred) base.Refresh();
			}
		}
		
		protected override void BeginQuery()
		{
			Exception error = null;
			object result = null;
			
			if (_objectType == null)
			{ error = new InvalidOperationException("ObjectType is not set."); }
			else if (String.IsNullOrEmpty(_propertyName))
			{ error = new InvalidOperationException("PropertyName is not set."); }
			else
			{
				PropertyInfo prop = _objectType.GetProperty(_propertyName, BindingFlags.Static | BindingFlags.Public);
				if(prop == null)
				{ error = new MissingMemberException(_objectType.FullName, _propertyName); }
				else
				{
					try
					{result = prop.GetValue(null, null); }
					catch (MethodAccessException e)
					{ error = e; }
					catch (TargetInvocationException e)
					{ error = e; }
				}
			}
			base.OnQueryFinished(result, error, null, null);
		}
	}
}
