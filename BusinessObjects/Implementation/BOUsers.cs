/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 27.06.2018 13:13:08
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using Awsd5.DataObjects;

namespace Awsd5.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOUsers.
	///It maintains a collection of BOContainers,BOLogtables,BOSessions,BOTrail objects.
	///</Summary>
	public partial class BOUsers : DATACONN0_BaseBusiness
	{
		#region member variables
		protected Int32? _id;
		protected Int64? _externalid;
		protected string _firstname;
		protected string _secondnane;
		protected string _login;
		protected string _middlename;
		protected Int32? _usertypeid;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOContainers> _boContainersCollection;
		List<BOLogtables> _boLogtablesCollection;
		List<BOSessions> _boSessionsCollection;
		List<BOTrail> _boTrailCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOUsers()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BOUsers(Int32 id)
		{
			try
			{
				DAOUsers daoUsers = DAOUsers.SelectOne(id);
				_id = daoUsers.Id;
				_externalid = daoUsers.Externalid;
				_firstname = daoUsers.Firstname;
				_secondnane = daoUsers.Secondnane;
				_login = daoUsers.Login;
				_middlename = daoUsers.Middlename;
				_usertypeid = daoUsers.Usertypeid;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOUsers
		///</parameters>
		protected internal BOUsers(DAOUsers daoUsers)
		{
			try
			{
				_id = daoUsers.Id;
				_externalid = daoUsers.Externalid;
				_firstname = daoUsers.Firstname;
				_secondnane = daoUsers.Secondnane;
				_login = daoUsers.Login;
				_middlename = daoUsers.Middlename;
				_usertypeid = daoUsers.Usertypeid;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Users record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOUsers daoUsers = new DAOUsers();
			RegisterDataObject(daoUsers);
			BeginTransaction("savenewBOUsers");
			try
			{
				daoUsers.Externalid = _externalid;
				daoUsers.Firstname = _firstname;
				daoUsers.Secondnane = _secondnane;
				daoUsers.Login = _login;
				daoUsers.Middlename = _middlename;
				daoUsers.Usertypeid = _usertypeid;
				daoUsers.Insert();
				CommitTransaction();
				
				_id = daoUsers.Id;
				_externalid = daoUsers.Externalid;
				_firstname = daoUsers.Firstname;
				_secondnane = daoUsers.Secondnane;
				_login = daoUsers.Login;
				_middlename = daoUsers.Middlename;
				_usertypeid = daoUsers.Usertypeid;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOUsers");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Users record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOUsers
		///</parameters>
		public virtual void Update()
		{
			DAOUsers daoUsers = new DAOUsers();
			RegisterDataObject(daoUsers);
			BeginTransaction("updateBOUsers");
			try
			{
				daoUsers.Id = _id;
				daoUsers.Externalid = _externalid;
				daoUsers.Firstname = _firstname;
				daoUsers.Secondnane = _secondnane;
				daoUsers.Login = _login;
				daoUsers.Middlename = _middlename;
				daoUsers.Usertypeid = _usertypeid;
				daoUsers.Update();
				CommitTransaction();
				
				_id = daoUsers.Id;
				_externalid = daoUsers.Externalid;
				_firstname = daoUsers.Firstname;
				_secondnane = daoUsers.Secondnane;
				_login = daoUsers.Login;
				_middlename = daoUsers.Middlename;
				_usertypeid = daoUsers.Usertypeid;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOUsers");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Users record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOUsers daoUsers = new DAOUsers();
			RegisterDataObject(daoUsers);
			BeginTransaction("deleteBOUsers");
			try
			{
				daoUsers.Id = _id;
				daoUsers.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOUsers");
				throw;
			}
		}
		
		///<Summary>
		///UsersCollection
		///This method returns the collection of BOUsers objects
		///</Summary>
		///<returns>
		///List[BOUsers]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOUsers> UsersCollection()
		{
			try
			{
				IList<BOUsers> boUsersCollection = new List<BOUsers>();
				IList<DAOUsers> daoUsersCollection = DAOUsers.SelectAll();
			
				foreach(DAOUsers daoUsers in daoUsersCollection)
					boUsersCollection.Add(new BOUsers(daoUsers));
			
				return boUsersCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///UsersCollectionCount
		///This method returns the collection count of BOUsers objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 UsersCollectionCount()
		{
			try
			{
				Int32 objCount = DAOUsers.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///UsersCollectionFromSearchFields
		///This method returns the collection of BOUsers objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BOUsers>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOUsers> UsersCollectionFromSearchFields(BOUsers boUsers)
		{
			try
			{
				IList<BOUsers> boUsersCollection = new List<BOUsers>();
				DAOUsers daoUsers = new DAOUsers();
				daoUsers.Id = boUsers.Id;
				daoUsers.Externalid = boUsers.Externalid;
				daoUsers.Firstname = boUsers.Firstname;
				daoUsers.Secondnane = boUsers.Secondnane;
				daoUsers.Login = boUsers.Login;
				daoUsers.Middlename = boUsers.Middlename;
				daoUsers.Usertypeid = boUsers.Usertypeid;
				IList<DAOUsers> daoUsersCollection = DAOUsers.SelectAllBySearchFields(daoUsers);
			
				foreach(DAOUsers resdaoUsers in daoUsersCollection)
					boUsersCollection.Add(new BOUsers(resdaoUsers));
			
				return boUsersCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///UsersCollectionFromSearchFieldsCount
		///This method returns the collection count of BOUsers objects, filtered by a search object
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 UsersCollectionFromSearchFieldsCount(BOUsers boUsers)
		{
			try
			{
				DAOUsers daoUsers = new DAOUsers();
				daoUsers.Id = boUsers.Id;
				daoUsers.Externalid = boUsers.Externalid;
				daoUsers.Firstname = boUsers.Firstname;
				daoUsers.Secondnane = boUsers.Secondnane;
				daoUsers.Login = boUsers.Login;
				daoUsers.Middlename = boUsers.Middlename;
				daoUsers.Usertypeid = boUsers.Usertypeid;
				Int32 objCount = DAOUsers.SelectAllBySearchFieldsCount(daoUsers);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ContainersCollection
		///This method returns its collection of BOContainers objects
		///</Summary>
		///<returns>
		///IList[BOContainers]
		///</returns>
		///<parameters>
		///BOUsers
		///</parameters>
		public virtual IList<BOContainers> ContainersCollection()
		{
			try
			{
				if(_boContainersCollection == null)
					LoadContainersCollection();
				
				return _boContainersCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LogtablesCollection
		///This method returns its collection of BOLogtables objects
		///</Summary>
		///<returns>
		///IList[BOLogtables]
		///</returns>
		///<parameters>
		///BOUsers
		///</parameters>
		public virtual IList<BOLogtables> LogtablesCollection()
		{
			try
			{
				if(_boLogtablesCollection == null)
					LoadLogtablesCollection();
				
				return _boLogtablesCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SessionsCollection
		///This method returns its collection of BOSessions objects
		///</Summary>
		///<returns>
		///IList[BOSessions]
		///</returns>
		///<parameters>
		///BOUsers
		///</parameters>
		public virtual IList<BOSessions> SessionsCollection()
		{
			try
			{
				if(_boSessionsCollection == null)
					LoadSessionsCollection();
				
				return _boSessionsCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///TrailCollection
		///This method returns its collection of BOTrail objects
		///</Summary>
		///<returns>
		///IList[BOTrail]
		///</returns>
		///<parameters>
		///BOUsers
		///</parameters>
		public virtual IList<BOTrail> TrailCollection()
		{
			try
			{
				if(_boTrailCollection == null)
					LoadTrailCollection();
				
				return _boTrailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadContainersCollection
		///This method loads the internal collection of BOContainers objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadContainersCollection()
		{
			try
			{
				_boContainersCollection = new List<BOContainers>();
				IList<DAOContainers> daoContainersCollection = DAOContainers.SelectAllByUserid(_id.Value);
				
				foreach(DAOContainers daoContainers in daoContainersCollection)
					_boContainersCollection.Add(new BOContainers(daoContainers));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddContainers
		///This method persists a BOContainers object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOContainers
		///</parameters>
		public virtual void AddContainers(BOContainers boContainers)
		{
			DAOContainers daoContainers = new DAOContainers();
			RegisterDataObject(daoContainers);
			BeginTransaction("addContainers");
			try
			{
				daoContainers.Id = boContainers.Id;
				daoContainers.Number = boContainers.Number;
				daoContainers.Doctara = boContainers.Doctara;
				daoContainers.Docbrutto = boContainers.Docbrutto;
				daoContainers.Docnetto = boContainers.Docnetto;
				daoContainers.Weightcount = boContainers.Weightcount;
				daoContainers.W1time = boContainers.W1time;
				daoContainers.W1result = boContainers.W1result;
				daoContainers.W1tara = boContainers.W1tara;
				daoContainers.W1brutto = boContainers.W1brutto;
				daoContainers.W1netto = boContainers.W1netto;
				daoContainers.W1scale = boContainers.W1scale;
				daoContainers.W2time = boContainers.W2time;
				daoContainers.W2result = boContainers.W2result;
				daoContainers.W2tara = boContainers.W2tara;
				daoContainers.W2brutto = boContainers.W2brutto;
				daoContainers.W2netto = boContainers.W2netto;
				daoContainers.W2scale = boContainers.W2scale;
				daoContainers.Session = boContainers.Session;
				daoContainers.Receiverid = boContainers.Receiverid;
				daoContainers.Senderid = boContainers.Senderid;
				daoContainers.Productid = boContainers.Productid;
				daoContainers.Operationid = boContainers.Operationid;
				daoContainers.Lotnumber = boContainers.Lotnumber;
				daoContainers.Trailid = boContainers.Trailid;
				daoContainers.Minesid = boContainers.Minesid;
				daoContainers.Zagrnumber = boContainers.Zagrnumber;
				daoContainers.Returnid = boContainers.Returnid;
				daoContainers.Sessionid = boContainers.Sessionid;
				daoContainers.Speed = boContainers.Speed;
				daoContainers.Nplatf = boContainers.Nplatf;
				daoContainers.Lineid = boContainers.Lineid;
				daoContainers.Tvagonid = boContainers.Tvagonid;
				daoContainers.Vid1 = boContainers.Vid1;
				daoContainers.Vid2 = boContainers.Vid2;
				daoContainers.Vid3 = boContainers.Vid3;
				daoContainers.Pr1 = boContainers.Pr1;
				daoContainers.Pr2 = boContainers.Pr2;
				daoContainers.Pr3 = boContainers.Pr3;
				daoContainers.Userid = _id.Value;
				daoContainers.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boContainers = new BOContainers(daoContainers);
				if(_boContainersCollection != null)
					_boContainersCollection.Add(boContainers);
			}
			catch
			{
				RollbackTransaction("addContainers");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllContainers
		///This method deletes all BOContainers objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllContainers()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllContainers");
			try
			{
				DAOContainers.DeleteAllByUserid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boContainersCollection != null)
				{
					_boContainersCollection.Clear();
					_boContainersCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllContainers");
				throw;
			}
		}
		
		///<Summary>
		///LoadLogtablesCollection
		///This method loads the internal collection of BOLogtables objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadLogtablesCollection()
		{
			try
			{
				_boLogtablesCollection = new List<BOLogtables>();
				IList<DAOLogtables> daoLogtablesCollection = DAOLogtables.SelectAllByUser(_id.Value);
				
				foreach(DAOLogtables daoLogtables in daoLogtablesCollection)
					_boLogtablesCollection.Add(new BOLogtables(daoLogtables));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddLogtables
		///This method persists a BOLogtables object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOLogtables
		///</parameters>
		public virtual void AddLogtables(BOLogtables boLogtables)
		{
			DAOLogtables daoLogtables = new DAOLogtables();
			RegisterDataObject(daoLogtables);
			BeginTransaction("addLogtables");
			try
			{
				daoLogtables.Id = boLogtables.Id;
				daoLogtables.Text = boLogtables.Text;
				daoLogtables.Type = boLogtables.Type;
				daoLogtables.Time = boLogtables.Time;
				daoLogtables.User = _id.Value;
				daoLogtables.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boLogtables = new BOLogtables(daoLogtables);
				if(_boLogtablesCollection != null)
					_boLogtablesCollection.Add(boLogtables);
			}
			catch
			{
				RollbackTransaction("addLogtables");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllLogtables
		///This method deletes all BOLogtables objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllLogtables()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllLogtables");
			try
			{
				DAOLogtables.DeleteAllByUser(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boLogtablesCollection != null)
				{
					_boLogtablesCollection.Clear();
					_boLogtablesCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllLogtables");
				throw;
			}
		}
		
		///<Summary>
		///LoadSessionsCollection
		///This method loads the internal collection of BOSessions objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSessionsCollection()
		{
			try
			{
				_boSessionsCollection = new List<BOSessions>();
				IList<DAOSessions> daoSessionsCollection = DAOSessions.SelectAllByUserid(_id.Value);
				
				foreach(DAOSessions daoSessions in daoSessionsCollection)
					_boSessionsCollection.Add(new BOSessions(daoSessions));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSessions
		///This method persists a BOSessions object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSessions
		///</parameters>
		public virtual void AddSessions(BOSessions boSessions)
		{
			DAOSessions daoSessions = new DAOSessions();
			RegisterDataObject(daoSessions);
			BeginTransaction("addSessions");
			try
			{
				daoSessions.Id = boSessions.Id;
				daoSessions.Number = boSessions.Number;
				daoSessions.Start = boSessions.Start;
				daoSessions.Stop = boSessions.Stop;
				daoSessions.Userid = _id.Value;
				daoSessions.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSessions = new BOSessions(daoSessions);
				if(_boSessionsCollection != null)
					_boSessionsCollection.Add(boSessions);
			}
			catch
			{
				RollbackTransaction("addSessions");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSessions
		///This method deletes all BOSessions objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSessions()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSessions");
			try
			{
				DAOSessions.DeleteAllByUserid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boSessionsCollection != null)
				{
					_boSessionsCollection.Clear();
					_boSessionsCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSessions");
				throw;
			}
		}
		
		///<Summary>
		///LoadTrailCollection
		///This method loads the internal collection of BOTrail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadTrailCollection()
		{
			try
			{
				_boTrailCollection = new List<BOTrail>();
				IList<DAOTrail> daoTrailCollection = DAOTrail.SelectAllByUserid(_id.Value);
				
				foreach(DAOTrail daoTrail in daoTrailCollection)
					_boTrailCollection.Add(new BOTrail(daoTrail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddTrail
		///This method persists a BOTrail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTrail
		///</parameters>
		public virtual void AddTrail(BOTrail boTrail)
		{
			DAOTrail daoTrail = new DAOTrail();
			RegisterDataObject(daoTrail);
			BeginTransaction("addTrail");
			try
			{
				daoTrail.Id = boTrail.Id;
				daoTrail.Number = boTrail.Number;
				daoTrail.Doctara = boTrail.Doctara;
				daoTrail.Docbrutto = boTrail.Docbrutto;
				daoTrail.Docnetto = boTrail.Docnetto;
				daoTrail.Weightcount = boTrail.Weightcount;
				daoTrail.W1time = boTrail.W1time;
				daoTrail.W1result = boTrail.W1result;
				daoTrail.W1tara = boTrail.W1tara;
				daoTrail.W1brutto = boTrail.W1brutto;
				daoTrail.W1netto = boTrail.W1netto;
				daoTrail.W1scale = boTrail.W1scale;
				daoTrail.W2time = boTrail.W2time;
				daoTrail.W2result = boTrail.W2result;
				daoTrail.W2tara = boTrail.W2tara;
				daoTrail.W2brutto = boTrail.W2brutto;
				daoTrail.W2netto = boTrail.W2netto;
				daoTrail.W2scale = boTrail.W2scale;
				daoTrail.Session = boTrail.Session;
				daoTrail.Receiverid = boTrail.Receiverid;
				daoTrail.Senderid = boTrail.Senderid;
				daoTrail.Productid = boTrail.Productid;
				daoTrail.Operationid = boTrail.Operationid;
				daoTrail.Lotnumber = boTrail.Lotnumber;
				daoTrail.Trainid1 = boTrail.Trainid1;
				daoTrail.Minesid = boTrail.Minesid;
				daoTrail.Zagrnumber = boTrail.Zagrnumber;
				daoTrail.Returnid = boTrail.Returnid;
				daoTrail.Sessionid = boTrail.Sessionid;
				daoTrail.Speed = boTrail.Speed;
				daoTrail.Nplatf = boTrail.Nplatf;
				daoTrail.Lineid = boTrail.Lineid;
				daoTrail.Tvagonid = boTrail.Tvagonid;
				daoTrail.Vid1 = boTrail.Vid1;
				daoTrail.Vid2 = boTrail.Vid2;
				daoTrail.Vid3 = boTrail.Vid3;
				daoTrail.Pr1 = boTrail.Pr1;
				daoTrail.Pr2 = boTrail.Pr2;
				daoTrail.Pr3 = boTrail.Pr3;
				daoTrail.Trainid2 = boTrail.Trainid2;
				daoTrail.Userid = _id.Value;
				daoTrail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boTrail = new BOTrail(daoTrail);
				if(_boTrailCollection != null)
					_boTrailCollection.Add(boTrail);
			}
			catch
			{
				RollbackTransaction("addTrail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllTrail
		///This method deletes all BOTrail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllTrail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllTrail");
			try
			{
				DAOTrail.DeleteAllByUserid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boTrailCollection != null)
				{
					_boTrailCollection.Clear();
					_boTrailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllTrail");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? Externalid
		{
			get
			{
				 return _externalid;
			}
			set
			{
				_externalid = value;
				_isDirty = true;
			}
		}
		
		public virtual string Firstname
		{
			get
			{
				 return _firstname;
			}
			set
			{
				_firstname = value;
				_isDirty = true;
			}
		}
		
		public virtual string Secondnane
		{
			get
			{
				 return _secondnane;
			}
			set
			{
				_secondnane = value;
				_isDirty = true;
			}
		}
		
		public virtual string Login
		{
			get
			{
				 return _login;
			}
			set
			{
				_login = value;
				_isDirty = true;
			}
		}
		
		public virtual string Middlename
		{
			get
			{
				 return _middlename;
			}
			set
			{
				_middlename = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Usertypeid
		{
			get
			{
				 return _usertypeid;
			}
			set
			{
				_usertypeid = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
