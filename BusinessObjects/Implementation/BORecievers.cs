/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 27.06.2018 13:13:08
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using Awsd5.DataObjects;

namespace Awsd5.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORecievers.
	///It maintains a collection of BOContainers objects.
	///</Summary>
	public partial class BORecievers : DATACONN0_BaseBusiness
	{
		#region member variables
		protected Int32? _id;
		protected Int64? _externalid;
		protected string _shortname;
		protected string _name;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOContainers> _boContainersCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORecievers()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BORecievers(Int32 id)
		{
			try
			{
				DAORecievers daoRecievers = DAORecievers.SelectOne(id);
				_id = daoRecievers.Id;
				_externalid = daoRecievers.Externalid;
				_shortname = daoRecievers.Shortname;
				_name = daoRecievers.Name;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORecievers
		///</parameters>
		protected internal BORecievers(DAORecievers daoRecievers)
		{
			try
			{
				_id = daoRecievers.Id;
				_externalid = daoRecievers.Externalid;
				_shortname = daoRecievers.Shortname;
				_name = daoRecievers.Name;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Recievers record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAORecievers daoRecievers = new DAORecievers();
			RegisterDataObject(daoRecievers);
			BeginTransaction("savenewBORecievers");
			try
			{
				daoRecievers.Externalid = _externalid;
				daoRecievers.Shortname = _shortname;
				daoRecievers.Name = _name;
				daoRecievers.Insert();
				CommitTransaction();
				
				_id = daoRecievers.Id;
				_externalid = daoRecievers.Externalid;
				_shortname = daoRecievers.Shortname;
				_name = daoRecievers.Name;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBORecievers");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Recievers record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORecievers
		///</parameters>
		public virtual void Update()
		{
			DAORecievers daoRecievers = new DAORecievers();
			RegisterDataObject(daoRecievers);
			BeginTransaction("updateBORecievers");
			try
			{
				daoRecievers.Id = _id;
				daoRecievers.Externalid = _externalid;
				daoRecievers.Shortname = _shortname;
				daoRecievers.Name = _name;
				daoRecievers.Update();
				CommitTransaction();
				
				_id = daoRecievers.Id;
				_externalid = daoRecievers.Externalid;
				_shortname = daoRecievers.Shortname;
				_name = daoRecievers.Name;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBORecievers");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Recievers record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAORecievers daoRecievers = new DAORecievers();
			RegisterDataObject(daoRecievers);
			BeginTransaction("deleteBORecievers");
			try
			{
				daoRecievers.Id = _id;
				daoRecievers.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBORecievers");
				throw;
			}
		}
		
		///<Summary>
		///RecieversCollection
		///This method returns the collection of BORecievers objects
		///</Summary>
		///<returns>
		///List[BORecievers]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORecievers> RecieversCollection()
		{
			try
			{
				IList<BORecievers> boRecieversCollection = new List<BORecievers>();
				IList<DAORecievers> daoRecieversCollection = DAORecievers.SelectAll();
			
				foreach(DAORecievers daoRecievers in daoRecieversCollection)
					boRecieversCollection.Add(new BORecievers(daoRecievers));
			
				return boRecieversCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RecieversCollectionCount
		///This method returns the collection count of BORecievers objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RecieversCollectionCount()
		{
			try
			{
				Int32 objCount = DAORecievers.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RecieversCollectionFromSearchFields
		///This method returns the collection of BORecievers objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BORecievers>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORecievers> RecieversCollectionFromSearchFields(BORecievers boRecievers)
		{
			try
			{
				IList<BORecievers> boRecieversCollection = new List<BORecievers>();
				DAORecievers daoRecievers = new DAORecievers();
				daoRecievers.Id = boRecievers.Id;
				daoRecievers.Externalid = boRecievers.Externalid;
				daoRecievers.Shortname = boRecievers.Shortname;
				daoRecievers.Name = boRecievers.Name;
				IList<DAORecievers> daoRecieversCollection = DAORecievers.SelectAllBySearchFields(daoRecievers);
			
				foreach(DAORecievers resdaoRecievers in daoRecieversCollection)
					boRecieversCollection.Add(new BORecievers(resdaoRecievers));
			
				return boRecieversCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RecieversCollectionFromSearchFieldsCount
		///This method returns the collection count of BORecievers objects, filtered by a search object
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RecieversCollectionFromSearchFieldsCount(BORecievers boRecievers)
		{
			try
			{
				DAORecievers daoRecievers = new DAORecievers();
				daoRecievers.Id = boRecievers.Id;
				daoRecievers.Externalid = boRecievers.Externalid;
				daoRecievers.Shortname = boRecievers.Shortname;
				daoRecievers.Name = boRecievers.Name;
				Int32 objCount = DAORecievers.SelectAllBySearchFieldsCount(daoRecievers);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ContainersCollection
		///This method returns its collection of BOContainers objects
		///</Summary>
		///<returns>
		///IList[BOContainers]
		///</returns>
		///<parameters>
		///BORecievers
		///</parameters>
		public virtual IList<BOContainers> ContainersCollection()
		{
			try
			{
				if(_boContainersCollection == null)
					LoadContainersCollection();
				
				return _boContainersCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadContainersCollection
		///This method loads the internal collection of BOContainers objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadContainersCollection()
		{
			try
			{
				_boContainersCollection = new List<BOContainers>();
				IList<DAOContainers> daoContainersCollection = DAOContainers.SelectAllByReceiverid(_id.Value);
				
				foreach(DAOContainers daoContainers in daoContainersCollection)
					_boContainersCollection.Add(new BOContainers(daoContainers));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddContainers
		///This method persists a BOContainers object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOContainers
		///</parameters>
		public virtual void AddContainers(BOContainers boContainers)
		{
			DAOContainers daoContainers = new DAOContainers();
			RegisterDataObject(daoContainers);
			BeginTransaction("addContainers");
			try
			{
				daoContainers.Id = boContainers.Id;
				daoContainers.Number = boContainers.Number;
				daoContainers.Doctara = boContainers.Doctara;
				daoContainers.Docbrutto = boContainers.Docbrutto;
				daoContainers.Docnetto = boContainers.Docnetto;
				daoContainers.Weightcount = boContainers.Weightcount;
				daoContainers.W1time = boContainers.W1time;
				daoContainers.W1result = boContainers.W1result;
				daoContainers.W1tara = boContainers.W1tara;
				daoContainers.W1brutto = boContainers.W1brutto;
				daoContainers.W1netto = boContainers.W1netto;
				daoContainers.W1scale = boContainers.W1scale;
				daoContainers.W2time = boContainers.W2time;
				daoContainers.W2result = boContainers.W2result;
				daoContainers.W2tara = boContainers.W2tara;
				daoContainers.W2brutto = boContainers.W2brutto;
				daoContainers.W2netto = boContainers.W2netto;
				daoContainers.W2scale = boContainers.W2scale;
				daoContainers.Session = boContainers.Session;
				daoContainers.Senderid = boContainers.Senderid;
				daoContainers.Productid = boContainers.Productid;
				daoContainers.Operationid = boContainers.Operationid;
				daoContainers.Lotnumber = boContainers.Lotnumber;
				daoContainers.Trailid = boContainers.Trailid;
				daoContainers.Minesid = boContainers.Minesid;
				daoContainers.Zagrnumber = boContainers.Zagrnumber;
				daoContainers.Returnid = boContainers.Returnid;
				daoContainers.Userid = boContainers.Userid;
				daoContainers.Sessionid = boContainers.Sessionid;
				daoContainers.Speed = boContainers.Speed;
				daoContainers.Nplatf = boContainers.Nplatf;
				daoContainers.Lineid = boContainers.Lineid;
				daoContainers.Tvagonid = boContainers.Tvagonid;
				daoContainers.Vid1 = boContainers.Vid1;
				daoContainers.Vid2 = boContainers.Vid2;
				daoContainers.Vid3 = boContainers.Vid3;
				daoContainers.Pr1 = boContainers.Pr1;
				daoContainers.Pr2 = boContainers.Pr2;
				daoContainers.Pr3 = boContainers.Pr3;
				daoContainers.Receiverid = _id.Value;
				daoContainers.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boContainers = new BOContainers(daoContainers);
				if(_boContainersCollection != null)
					_boContainersCollection.Add(boContainers);
			}
			catch
			{
				RollbackTransaction("addContainers");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllContainers
		///This method deletes all BOContainers objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllContainers()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllContainers");
			try
			{
				DAOContainers.DeleteAllByReceiverid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boContainersCollection != null)
				{
					_boContainersCollection.Clear();
					_boContainersCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllContainers");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? Externalid
		{
			get
			{
				 return _externalid;
			}
			set
			{
				_externalid = value;
				_isDirty = true;
			}
		}
		
		public virtual string Shortname
		{
			get
			{
				 return _shortname;
			}
			set
			{
				_shortname = value;
				_isDirty = true;
			}
		}
		
		public virtual string Name
		{
			get
			{
				 return _name;
			}
			set
			{
				_name = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
