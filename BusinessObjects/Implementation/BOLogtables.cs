/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 27.06.2018 13:13:08
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using Awsd5.DataObjects;

namespace Awsd5.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOLogtables.
	///</Summary>
	public partial class BOLogtables : DATACONN0_BaseBusiness
	{
		#region member variables
		protected Int32? _id;
		protected string _text;
		protected Int64? _type;
		protected DateTime? _time;
		protected Int32? _user;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOLogtables()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BOLogtables(Int32 id)
		{
			try
			{
				DAOLogtables daoLogtables = DAOLogtables.SelectOne(id);
				_id = daoLogtables.Id;
				_text = daoLogtables.Text;
				_type = daoLogtables.Type;
				_time = daoLogtables.Time;
				_user = daoLogtables.User;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOLogtables
		///</parameters>
		protected internal BOLogtables(DAOLogtables daoLogtables)
		{
			try
			{
				_id = daoLogtables.Id;
				_text = daoLogtables.Text;
				_type = daoLogtables.Type;
				_time = daoLogtables.Time;
				_user = daoLogtables.User;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Logtables record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOLogtables daoLogtables = new DAOLogtables();
			RegisterDataObject(daoLogtables);
			BeginTransaction("savenewBOLogtables");
			try
			{
				daoLogtables.Text = _text;
				daoLogtables.Type = _type;
				daoLogtables.Time = _time;
				daoLogtables.User = _user;
				daoLogtables.Insert();
				CommitTransaction();
				
				_id = daoLogtables.Id;
				_text = daoLogtables.Text;
				_type = daoLogtables.Type;
				_time = daoLogtables.Time;
				_user = daoLogtables.User;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOLogtables");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Logtables record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOLogtables
		///</parameters>
		public virtual void Update()
		{
			DAOLogtables daoLogtables = new DAOLogtables();
			RegisterDataObject(daoLogtables);
			BeginTransaction("updateBOLogtables");
			try
			{
				daoLogtables.Id = _id;
				daoLogtables.Text = _text;
				daoLogtables.Type = _type;
				daoLogtables.Time = _time;
				daoLogtables.User = _user;
				daoLogtables.Update();
				CommitTransaction();
				
				_id = daoLogtables.Id;
				_text = daoLogtables.Text;
				_type = daoLogtables.Type;
				_time = daoLogtables.Time;
				_user = daoLogtables.User;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOLogtables");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Logtables record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOLogtables daoLogtables = new DAOLogtables();
			RegisterDataObject(daoLogtables);
			BeginTransaction("deleteBOLogtables");
			try
			{
				daoLogtables.Id = _id;
				daoLogtables.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOLogtables");
				throw;
			}
		}
		
		///<Summary>
		///LogtablesCollection
		///This method returns the collection of BOLogtables objects
		///</Summary>
		///<returns>
		///List[BOLogtables]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOLogtables> LogtablesCollection()
		{
			try
			{
				IList<BOLogtables> boLogtablesCollection = new List<BOLogtables>();
				IList<DAOLogtables> daoLogtablesCollection = DAOLogtables.SelectAll();
			
				foreach(DAOLogtables daoLogtables in daoLogtablesCollection)
					boLogtablesCollection.Add(new BOLogtables(daoLogtables));
			
				return boLogtablesCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///LogtablesCollectionCount
		///This method returns the collection count of BOLogtables objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 LogtablesCollectionCount()
		{
			try
			{
				Int32 objCount = DAOLogtables.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///LogtablesCollectionFromSearchFields
		///This method returns the collection of BOLogtables objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BOLogtables>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOLogtables> LogtablesCollectionFromSearchFields(BOLogtables boLogtables)
		{
			try
			{
				IList<BOLogtables> boLogtablesCollection = new List<BOLogtables>();
				DAOLogtables daoLogtables = new DAOLogtables();
				daoLogtables.Id = boLogtables.Id;
				daoLogtables.Text = boLogtables.Text;
				daoLogtables.Type = boLogtables.Type;
				daoLogtables.Time = boLogtables.Time;
				daoLogtables.User = boLogtables.User;
				IList<DAOLogtables> daoLogtablesCollection = DAOLogtables.SelectAllBySearchFields(daoLogtables);
			
				foreach(DAOLogtables resdaoLogtables in daoLogtablesCollection)
					boLogtablesCollection.Add(new BOLogtables(resdaoLogtables));
			
				return boLogtablesCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///LogtablesCollectionFromSearchFieldsCount
		///This method returns the collection count of BOLogtables objects, filtered by a search object
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 LogtablesCollectionFromSearchFieldsCount(BOLogtables boLogtables)
		{
			try
			{
				DAOLogtables daoLogtables = new DAOLogtables();
				daoLogtables.Id = boLogtables.Id;
				daoLogtables.Text = boLogtables.Text;
				daoLogtables.Type = boLogtables.Type;
				daoLogtables.Time = boLogtables.Time;
				daoLogtables.User = boLogtables.User;
				Int32 objCount = DAOLogtables.SelectAllBySearchFieldsCount(daoLogtables);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string Text
		{
			get
			{
				 return _text;
			}
			set
			{
				_text = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? Type
		{
			get
			{
				 return _type;
			}
			set
			{
				_type = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? Time
		{
			get
			{
				 return _time;
			}
			set
			{
				_time = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? User
		{
			get
			{
				 return _user;
			}
			set
			{
				_user = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
