/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 27.06.2018 13:13:08
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using Awsd5.DataObjects;

namespace Awsd5.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOUsertypes.
	///It maintains a collection of BOUsers objects.
	///</Summary>
	public partial class BOUsertypes : DATACONN0_BaseBusiness
	{
		#region member variables
		protected Int32? _id;
		protected Int64? _externalid;
		protected string _name;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOUsers> _boUsersCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOUsertypes()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BOUsertypes(Int32 id)
		{
			try
			{
				DAOUsertypes daoUsertypes = DAOUsertypes.SelectOne(id);
				_id = daoUsertypes.Id;
				_externalid = daoUsertypes.Externalid;
				_name = daoUsertypes.Name;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOUsertypes
		///</parameters>
		protected internal BOUsertypes(DAOUsertypes daoUsertypes)
		{
			try
			{
				_id = daoUsertypes.Id;
				_externalid = daoUsertypes.Externalid;
				_name = daoUsertypes.Name;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Usertypes record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOUsertypes daoUsertypes = new DAOUsertypes();
			RegisterDataObject(daoUsertypes);
			BeginTransaction("savenewBOUsertypes");
			try
			{
				daoUsertypes.Externalid = _externalid;
				daoUsertypes.Name = _name;
				daoUsertypes.Insert();
				CommitTransaction();
				
				_id = daoUsertypes.Id;
				_externalid = daoUsertypes.Externalid;
				_name = daoUsertypes.Name;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOUsertypes");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Usertypes record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOUsertypes
		///</parameters>
		public virtual void Update()
		{
			DAOUsertypes daoUsertypes = new DAOUsertypes();
			RegisterDataObject(daoUsertypes);
			BeginTransaction("updateBOUsertypes");
			try
			{
				daoUsertypes.Id = _id;
				daoUsertypes.Externalid = _externalid;
				daoUsertypes.Name = _name;
				daoUsertypes.Update();
				CommitTransaction();
				
				_id = daoUsertypes.Id;
				_externalid = daoUsertypes.Externalid;
				_name = daoUsertypes.Name;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOUsertypes");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Usertypes record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOUsertypes daoUsertypes = new DAOUsertypes();
			RegisterDataObject(daoUsertypes);
			BeginTransaction("deleteBOUsertypes");
			try
			{
				daoUsertypes.Id = _id;
				daoUsertypes.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOUsertypes");
				throw;
			}
		}
		
		///<Summary>
		///UsertypesCollection
		///This method returns the collection of BOUsertypes objects
		///</Summary>
		///<returns>
		///List[BOUsertypes]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOUsertypes> UsertypesCollection()
		{
			try
			{
				IList<BOUsertypes> boUsertypesCollection = new List<BOUsertypes>();
				IList<DAOUsertypes> daoUsertypesCollection = DAOUsertypes.SelectAll();
			
				foreach(DAOUsertypes daoUsertypes in daoUsertypesCollection)
					boUsertypesCollection.Add(new BOUsertypes(daoUsertypes));
			
				return boUsertypesCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///UsertypesCollectionCount
		///This method returns the collection count of BOUsertypes objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 UsertypesCollectionCount()
		{
			try
			{
				Int32 objCount = DAOUsertypes.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///UsertypesCollectionFromSearchFields
		///This method returns the collection of BOUsertypes objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BOUsertypes>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOUsertypes> UsertypesCollectionFromSearchFields(BOUsertypes boUsertypes)
		{
			try
			{
				IList<BOUsertypes> boUsertypesCollection = new List<BOUsertypes>();
				DAOUsertypes daoUsertypes = new DAOUsertypes();
				daoUsertypes.Id = boUsertypes.Id;
				daoUsertypes.Externalid = boUsertypes.Externalid;
				daoUsertypes.Name = boUsertypes.Name;
				IList<DAOUsertypes> daoUsertypesCollection = DAOUsertypes.SelectAllBySearchFields(daoUsertypes);
			
				foreach(DAOUsertypes resdaoUsertypes in daoUsertypesCollection)
					boUsertypesCollection.Add(new BOUsertypes(resdaoUsertypes));
			
				return boUsertypesCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///UsertypesCollectionFromSearchFieldsCount
		///This method returns the collection count of BOUsertypes objects, filtered by a search object
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 UsertypesCollectionFromSearchFieldsCount(BOUsertypes boUsertypes)
		{
			try
			{
				DAOUsertypes daoUsertypes = new DAOUsertypes();
				daoUsertypes.Id = boUsertypes.Id;
				daoUsertypes.Externalid = boUsertypes.Externalid;
				daoUsertypes.Name = boUsertypes.Name;
				Int32 objCount = DAOUsertypes.SelectAllBySearchFieldsCount(daoUsertypes);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///UsersCollection
		///This method returns its collection of BOUsers objects
		///</Summary>
		///<returns>
		///IList[BOUsers]
		///</returns>
		///<parameters>
		///BOUsertypes
		///</parameters>
		public virtual IList<BOUsers> UsersCollection()
		{
			try
			{
				if(_boUsersCollection == null)
					LoadUsersCollection();
				
				return _boUsersCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadUsersCollection
		///This method loads the internal collection of BOUsers objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadUsersCollection()
		{
			try
			{
				_boUsersCollection = new List<BOUsers>();
				IList<DAOUsers> daoUsersCollection = DAOUsers.SelectAllByUsertypeid(_id.Value);
				
				foreach(DAOUsers daoUsers in daoUsersCollection)
					_boUsersCollection.Add(new BOUsers(daoUsers));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddUsers
		///This method persists a BOUsers object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOUsers
		///</parameters>
		public virtual void AddUsers(BOUsers boUsers)
		{
			DAOUsers daoUsers = new DAOUsers();
			RegisterDataObject(daoUsers);
			BeginTransaction("addUsers");
			try
			{
				daoUsers.Id = boUsers.Id;
				daoUsers.Externalid = boUsers.Externalid;
				daoUsers.Firstname = boUsers.Firstname;
				daoUsers.Secondnane = boUsers.Secondnane;
				daoUsers.Login = boUsers.Login;
				daoUsers.Middlename = boUsers.Middlename;
				daoUsers.Usertypeid = _id.Value;
				daoUsers.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boUsers = new BOUsers(daoUsers);
				if(_boUsersCollection != null)
					_boUsersCollection.Add(boUsers);
			}
			catch
			{
				RollbackTransaction("addUsers");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllUsers
		///This method deletes all BOUsers objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllUsers()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllUsers");
			try
			{
				DAOUsers.DeleteAllByUsertypeid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boUsersCollection != null)
				{
					_boUsersCollection.Clear();
					_boUsersCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllUsers");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? Externalid
		{
			get
			{
				 return _externalid;
			}
			set
			{
				_externalid = value;
				_isDirty = true;
			}
		}
		
		public virtual string Name
		{
			get
			{
				 return _name;
			}
			set
			{
				_name = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
