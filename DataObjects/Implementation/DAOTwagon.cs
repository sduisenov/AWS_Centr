/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 27.06.2018 13:13:07
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace Awsd5.DataObjects
{
	public partial class DAOTwagon : DATACONN0_BaseData
	{
		#region member variables
		protected Int32? _id;
		protected string _name;
		protected Int32? _r1;
		protected Int32? _r2;
		protected Int32? _userid;
		protected DateTime? _realdada;
		protected Int32? _r3;
		protected Int32? _r4;
		protected Int32? _r5;
		protected Int32? _r6;
		protected Int32? _r7;
		protected Int32? _r8;
		protected Int32? _r9;
		protected Int32? _r10;
		protected Int32? _r11;
		#endregion

		#region class methods
		public DAOTwagon()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table twagon based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOTwagon
		///</returns>
		///<parameters>
		///Int32? id
		///</parameters>
		public static DAOTwagon SelectOne(Int32? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtwagon_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("twagon");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOTwagon retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOTwagon();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["id"];
					retObj._name					 = Convert.IsDBNull(dt.Rows[0]["name"]) ? null : (string)dt.Rows[0]["name"];
					retObj._r1					 = Convert.IsDBNull(dt.Rows[0]["r1"]) ? (Int32?)null : (Int32?)dt.Rows[0]["r1"];
					retObj._r2					 = Convert.IsDBNull(dt.Rows[0]["r2"]) ? (Int32?)null : (Int32?)dt.Rows[0]["r2"];
					retObj._userid					 = Convert.IsDBNull(dt.Rows[0]["userid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["userid"];
					retObj._realdada					 = Convert.IsDBNull(dt.Rows[0]["realdada"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["realdada"];
					retObj._r3					 = Convert.IsDBNull(dt.Rows[0]["r3"]) ? (Int32?)null : (Int32?)dt.Rows[0]["r3"];
					retObj._r4					 = Convert.IsDBNull(dt.Rows[0]["r4"]) ? (Int32?)null : (Int32?)dt.Rows[0]["r4"];
					retObj._r5					 = Convert.IsDBNull(dt.Rows[0]["r5"]) ? (Int32?)null : (Int32?)dt.Rows[0]["r5"];
					retObj._r6					 = Convert.IsDBNull(dt.Rows[0]["r6"]) ? (Int32?)null : (Int32?)dt.Rows[0]["r6"];
					retObj._r7					 = Convert.IsDBNull(dt.Rows[0]["r7"]) ? (Int32?)null : (Int32?)dt.Rows[0]["r7"];
					retObj._r8					 = Convert.IsDBNull(dt.Rows[0]["r8"]) ? (Int32?)null : (Int32?)dt.Rows[0]["r8"];
					retObj._r9					 = Convert.IsDBNull(dt.Rows[0]["r9"]) ? (Int32?)null : (Int32?)dt.Rows[0]["r9"];
					retObj._r10					 = Convert.IsDBNull(dt.Rows[0]["r10"]) ? (Int32?)null : (Int32?)dt.Rows[0]["r10"];
					retObj._r11					 = Convert.IsDBNull(dt.Rows[0]["r11"]) ? (Int32?)null : (Int32?)dt.Rows[0]["r11"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table twagon based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtwagon_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table twagon
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtwagon_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new SqlParameter("@name", SqlDbType.VarChar, 12, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r1", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r2", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@userid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@realdada", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_realdada?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r3", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r3?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r4", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r4?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r5", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r5?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r6", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r6?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r7", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r7?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r8", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r8?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r9", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r9?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r10", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r10?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r11", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r11?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@id"].Value;
				_name					 = Convert.IsDBNull(command.Parameters["@name"].Value) ? null : (string)command.Parameters["@name"].Value;
				_r1					 = Convert.IsDBNull(command.Parameters["@r1"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r1"].Value;
				_r2					 = Convert.IsDBNull(command.Parameters["@r2"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r2"].Value;
				_userid					 = Convert.IsDBNull(command.Parameters["@userid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@userid"].Value;
				_realdada					 = Convert.IsDBNull(command.Parameters["@realdada"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@realdada"].Value;
				_r3					 = Convert.IsDBNull(command.Parameters["@r3"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r3"].Value;
				_r4					 = Convert.IsDBNull(command.Parameters["@r4"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r4"].Value;
				_r5					 = Convert.IsDBNull(command.Parameters["@r5"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r5"].Value;
				_r6					 = Convert.IsDBNull(command.Parameters["@r6"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r6"].Value;
				_r7					 = Convert.IsDBNull(command.Parameters["@r7"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r7"].Value;
				_r8					 = Convert.IsDBNull(command.Parameters["@r8"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r8"].Value;
				_r9					 = Convert.IsDBNull(command.Parameters["@r9"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r9"].Value;
				_r10					 = Convert.IsDBNull(command.Parameters["@r10"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r10"].Value;
				_r11					 = Convert.IsDBNull(command.Parameters["@r11"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r11"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table twagon
		///</Summary>
		///<returns>
		///IList-DAOTwagon.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOTwagon> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtwagon_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("twagon");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOTwagon> objList = new List<DAOTwagon>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOTwagon retObj = new DAOTwagon();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._name					 = Convert.IsDBNull(row["name"]) ? null : (string)row["name"];
						retObj._r1					 = Convert.IsDBNull(row["r1"]) ? (Int32?)null : (Int32?)row["r1"];
						retObj._r2					 = Convert.IsDBNull(row["r2"]) ? (Int32?)null : (Int32?)row["r2"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._realdada					 = Convert.IsDBNull(row["realdada"]) ? (DateTime?)null : (DateTime?)row["realdada"];
						retObj._r3					 = Convert.IsDBNull(row["r3"]) ? (Int32?)null : (Int32?)row["r3"];
						retObj._r4					 = Convert.IsDBNull(row["r4"]) ? (Int32?)null : (Int32?)row["r4"];
						retObj._r5					 = Convert.IsDBNull(row["r5"]) ? (Int32?)null : (Int32?)row["r5"];
						retObj._r6					 = Convert.IsDBNull(row["r6"]) ? (Int32?)null : (Int32?)row["r6"];
						retObj._r7					 = Convert.IsDBNull(row["r7"]) ? (Int32?)null : (Int32?)row["r7"];
						retObj._r8					 = Convert.IsDBNull(row["r8"]) ? (Int32?)null : (Int32?)row["r8"];
						retObj._r9					 = Convert.IsDBNull(row["r9"]) ? (Int32?)null : (Int32?)row["r9"];
						retObj._r10					 = Convert.IsDBNull(row["r10"]) ? (Int32?)null : (Int32?)row["r10"];
						retObj._r11					 = Convert.IsDBNull(row["r11"]) ? (Int32?)null : (Int32?)row["r11"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtwagon_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///IList-DAOTwagon.
		///</returns>
		///<parameters>
		///DAOTwagon daoTwagon
		///</parameters>
		public static IList<DAOTwagon> SelectAllBySearchFields(DAOTwagon daoTwagon)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtwagon_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("twagon");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@name", SqlDbType.VarChar, 12, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoTwagon.Name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r1", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r2", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@userid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.Userid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@realdada", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoTwagon.Realdada?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r3", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R3?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r4", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R4?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r5", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R5?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r6", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R6?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r7", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R7?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r8", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R8?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r9", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R9?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r10", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R10?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r11", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R11?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOTwagon> objList = new List<DAOTwagon>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOTwagon retObj = new DAOTwagon();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._name					 = Convert.IsDBNull(row["name"]) ? null : (string)row["name"];
						retObj._r1					 = Convert.IsDBNull(row["r1"]) ? (Int32?)null : (Int32?)row["r1"];
						retObj._r2					 = Convert.IsDBNull(row["r2"]) ? (Int32?)null : (Int32?)row["r2"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._realdada					 = Convert.IsDBNull(row["realdada"]) ? (DateTime?)null : (DateTime?)row["realdada"];
						retObj._r3					 = Convert.IsDBNull(row["r3"]) ? (Int32?)null : (Int32?)row["r3"];
						retObj._r4					 = Convert.IsDBNull(row["r4"]) ? (Int32?)null : (Int32?)row["r4"];
						retObj._r5					 = Convert.IsDBNull(row["r5"]) ? (Int32?)null : (Int32?)row["r5"];
						retObj._r6					 = Convert.IsDBNull(row["r6"]) ? (Int32?)null : (Int32?)row["r6"];
						retObj._r7					 = Convert.IsDBNull(row["r7"]) ? (Int32?)null : (Int32?)row["r7"];
						retObj._r8					 = Convert.IsDBNull(row["r8"]) ? (Int32?)null : (Int32?)row["r8"];
						retObj._r9					 = Convert.IsDBNull(row["r9"]) ? (Int32?)null : (Int32?)row["r9"];
						retObj._r10					 = Convert.IsDBNull(row["r10"]) ? (Int32?)null : (Int32?)row["r10"];
						retObj._r11					 = Convert.IsDBNull(row["r11"]) ? (Int32?)null : (Int32?)row["r11"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOTwagon daoTwagon
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOTwagon daoTwagon)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtwagon_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@name", SqlDbType.VarChar, 12, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoTwagon.Name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r1", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r2", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@userid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.Userid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@realdada", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoTwagon.Realdada?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r3", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R3?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r4", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R4?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r5", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R5?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r6", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R6?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r7", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R7?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r8", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R8?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r9", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R9?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r10", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R10?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r11", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoTwagon.R11?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table twagon based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtwagon_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@name", SqlDbType.VarChar, 12, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r1", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r2", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@userid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@realdada", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_realdada?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r3", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r3?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r4", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r4?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r5", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r5?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r6", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r6?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r7", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r7?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r8", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r8?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r9", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r9?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r10", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r10?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@r11", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_r11?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@id"].Value;
				_name					 = Convert.IsDBNull(command.Parameters["@name"].Value) ? null : (string)command.Parameters["@name"].Value;
				_r1					 = Convert.IsDBNull(command.Parameters["@r1"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r1"].Value;
				_r2					 = Convert.IsDBNull(command.Parameters["@r2"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r2"].Value;
				_userid					 = Convert.IsDBNull(command.Parameters["@userid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@userid"].Value;
				_realdada					 = Convert.IsDBNull(command.Parameters["@realdada"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@realdada"].Value;
				_r3					 = Convert.IsDBNull(command.Parameters["@r3"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r3"].Value;
				_r4					 = Convert.IsDBNull(command.Parameters["@r4"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r4"].Value;
				_r5					 = Convert.IsDBNull(command.Parameters["@r5"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r5"].Value;
				_r6					 = Convert.IsDBNull(command.Parameters["@r6"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r6"].Value;
				_r7					 = Convert.IsDBNull(command.Parameters["@r7"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r7"].Value;
				_r8					 = Convert.IsDBNull(command.Parameters["@r8"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r8"].Value;
				_r9					 = Convert.IsDBNull(command.Parameters["@r9"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r9"].Value;
				_r10					 = Convert.IsDBNull(command.Parameters["@r10"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r10"].Value;
				_r11					 = Convert.IsDBNull(command.Parameters["@r11"].Value) ? (Int32?)null : (Int32?)command.Parameters["@r11"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public string Name
		{
			get
			{
				return _name;
			}
			set
			{
				_name = value;
			}
		}

		public Int32? R1
		{
			get
			{
				return _r1;
			}
			set
			{
				_r1 = value;
			}
		}

		public Int32? R2
		{
			get
			{
				return _r2;
			}
			set
			{
				_r2 = value;
			}
		}

		public Int32? Userid
		{
			get
			{
				return _userid;
			}
			set
			{
				_userid = value;
			}
		}

		public DateTime? Realdada
		{
			get
			{
				return _realdada;
			}
			set
			{
				_realdada = value;
			}
		}

		public Int32? R3
		{
			get
			{
				return _r3;
			}
			set
			{
				_r3 = value;
			}
		}

		public Int32? R4
		{
			get
			{
				return _r4;
			}
			set
			{
				_r4 = value;
			}
		}

		public Int32? R5
		{
			get
			{
				return _r5;
			}
			set
			{
				_r5 = value;
			}
		}

		public Int32? R6
		{
			get
			{
				return _r6;
			}
			set
			{
				_r6 = value;
			}
		}

		public Int32? R7
		{
			get
			{
				return _r7;
			}
			set
			{
				_r7 = value;
			}
		}

		public Int32? R8
		{
			get
			{
				return _r8;
			}
			set
			{
				_r8 = value;
			}
		}

		public Int32? R9
		{
			get
			{
				return _r9;
			}
			set
			{
				_r9 = value;
			}
		}

		public Int32? R10
		{
			get
			{
				return _r10;
			}
			set
			{
				_r10 = value;
			}
		}

		public Int32? R11
		{
			get
			{
				return _r11;
			}
			set
			{
				_r11 = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace Awsd5.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprtwagon_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[id]
			,[name]
			,[r1]
			,[r2]
			,[userid]
			,[realdada]
			,[r3]
			,[r4]
			,[r5]
			,[r6]
			,[r7]
			,[r8]
			,[r9]
			,[r10]
			,[r11]
			FROM [dbo].[twagon]
			WHERE 
			[id] = @id
			";

		internal static string ctprtwagon_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[twagon]
			WHERE 
			[id] = @id
			";

		internal static string ctprtwagon_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[twagon]
			(
			[name]
			,[r1]
			,[r2]
			,[userid]
			,[realdada]
			,[r3]
			,[r4]
			,[r5]
			,[r6]
			,[r7]
			,[r8]
			,[r9]
			,[r10]
			,[r11]
			)
			VALUES
			(
			@name
			,@r1
			,@r2
			,@userid
			,@realdada
			,@r3
			,@r4
			,@r5
			,@r6
			,@r7
			,@r8
			,@r9
			,@r10
			,@r11
			)
			SELECT 
			@id = [id]
			,@name = [name]
			,@r1 = [r1]
			,@r2 = [r2]
			,@userid = [userid]
			,@realdada = [realdada]
			,@r3 = [r3]
			,@r4 = [r4]
			,@r5 = [r5]
			,@r6 = [r6]
			,@r7 = [r7]
			,@r8 = [r8]
			,@r9 = [r9]
			,@r10 = [r10]
			,@r11 = [r11]
			FROM [dbo].[twagon]
			WHERE 
			id = SCOPE_IDENTITY()
			";

		internal static string ctprtwagon_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[id]
			,[name]
			,[r1]
			,[r2]
			,[userid]
			,[realdada]
			,[r3]
			,[r4]
			,[r5]
			,[r6]
			,[r7]
			,[r8]
			,[r9]
			,[r10]
			,[r11]
			FROM [dbo].[twagon]
			";

		internal static string ctprtwagon_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[twagon]
			";

		internal static string ctprtwagon_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[id],
			[name],
			[r1],
			[r2],
			[userid],
			[realdada],
			[r3],
			[r4],
			[r5],
			[r6],
			[r7],
			[r8],
			[r9],
			[r10],
			[r11]
			FROM [dbo].[twagon]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([name] LIKE @name OR @name is null)
			AND ([r1] LIKE @r1 OR @r1 is null)
			AND ([r2] LIKE @r2 OR @r2 is null)
			AND ([userid] LIKE @userid OR @userid is null)
			AND ([realdada] LIKE @realdada OR @realdada is null)
			AND ([r3] LIKE @r3 OR @r3 is null)
			AND ([r4] LIKE @r4 OR @r4 is null)
			AND ([r5] LIKE @r5 OR @r5 is null)
			AND ([r6] LIKE @r6 OR @r6 is null)
			AND ([r7] LIKE @r7 OR @r7 is null)
			AND ([r8] LIKE @r8 OR @r8 is null)
			AND ([r9] LIKE @r9 OR @r9 is null)
			AND ([r10] LIKE @r10 OR @r10 is null)
			AND ([r11] LIKE @r11 OR @r11 is null)
			";

		internal static string ctprtwagon_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[twagon]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([name] LIKE @name OR @name is null)
			AND ([r1] LIKE @r1 OR @r1 is null)
			AND ([r2] LIKE @r2 OR @r2 is null)
			AND ([userid] LIKE @userid OR @userid is null)
			AND ([realdada] LIKE @realdada OR @realdada is null)
			AND ([r3] LIKE @r3 OR @r3 is null)
			AND ([r4] LIKE @r4 OR @r4 is null)
			AND ([r5] LIKE @r5 OR @r5 is null)
			AND ([r6] LIKE @r6 OR @r6 is null)
			AND ([r7] LIKE @r7 OR @r7 is null)
			AND ([r8] LIKE @r8 OR @r8 is null)
			AND ([r9] LIKE @r9 OR @r9 is null)
			AND ([r10] LIKE @r10 OR @r10 is null)
			AND ([r11] LIKE @r11 OR @r11 is null)
			";

		internal static string ctprtwagon_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[twagon]
			SET
			[name] = @name
			,[r1] = @r1
			,[r2] = @r2
			,[userid] = @userid
			,[realdada] = @realdada
			,[r3] = @r3
			,[r4] = @r4
			,[r5] = @r5
			,[r6] = @r6
			,[r7] = @r7
			,[r8] = @r8
			,[r9] = @r9
			,[r10] = @r10
			,[r11] = @r11
			WHERE 
			[id] = @id
			SELECT 
			@id = [id]
			,@name = [name]
			,@r1 = [r1]
			,@r2 = [r2]
			,@userid = [userid]
			,@realdada = [realdada]
			,@r3 = [r3]
			,@r4 = [r4]
			,@r5 = [r5]
			,@r6 = [r6]
			,@r7 = [r7]
			,@r8 = [r8]
			,@r9 = [r9]
			,@r10 = [r10]
			,@r11 = [r11]
			FROM [dbo].[twagon]
			WHERE 
			[id] = @id
			";

	}
}
#endregion
