/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 27.06.2018 13:13:07
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace Awsd5.DataObjects
{
	public partial class DAOContainers : DATACONN0_BaseData
	{
		#region member variables
		protected Int32? _id;
		protected string _number;
		protected float? _doctara;
		protected float? _docbrutto;
		protected float? _docnetto;
		protected Int32? _weightcount;
		protected DateTime? _w1time;
		protected float? _w1result;
		protected float? _w1tara;
		protected float? _w1brutto;
		protected float? _w1netto;
		protected Int32? _w1scale;
		protected DateTime? _w2time;
		protected float? _w2result;
		protected float? _w2tara;
		protected float? _w2brutto;
		protected float? _w2netto;
		protected Int32? _w2scale;
		protected Int32? _session;
		protected Int32? _receiverid;
		protected Int32? _senderid;
		protected Int32? _productid;
		protected Int32? _operationid;
		protected string _lotnumber;
		protected Int32? _trailid;
		protected Int32? _minesid;
		protected string _zagrnumber;
		protected Int32? _returnid;
		protected Int32? _userid;
		protected Int32? _sessionid;
		protected float? _speed;
		protected Int32? _nplatf;
		protected Int32? _lineid;
		protected Int32? _tvagonid;
		protected byte[] _vid1;
		protected byte[] _vid2;
		protected byte[] _vid3;
		protected Int32? _pr1;
		protected Int32? _pr2;
		protected Int32? _pr3;
		#endregion

		#region class methods
		public DAOContainers()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table containers based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOContainers
		///</returns>
		///<parameters>
		///Int32? id
		///</parameters>
		public static DAOContainers SelectOne(Int32? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOContainers retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOContainers();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["id"];
					retObj._number					 = Convert.IsDBNull(dt.Rows[0]["number"]) ? null : (string)dt.Rows[0]["number"];
					retObj._doctara					 = Convert.IsDBNull(dt.Rows[0]["doctara"]) ? (float?)null : (float?)(double?)dt.Rows[0]["doctara"];
					retObj._docbrutto					 = Convert.IsDBNull(dt.Rows[0]["docbrutto"]) ? (float?)null : (float?)(double?)dt.Rows[0]["docbrutto"];
					retObj._docnetto					 = Convert.IsDBNull(dt.Rows[0]["docnetto"]) ? (float?)null : (float?)(double?)dt.Rows[0]["docnetto"];
					retObj._weightcount					 = Convert.IsDBNull(dt.Rows[0]["weightcount"]) ? (Int32?)null : (Int32?)dt.Rows[0]["weightcount"];
					retObj._w1time					 = Convert.IsDBNull(dt.Rows[0]["w1time"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["w1time"];
					retObj._w1result					 = Convert.IsDBNull(dt.Rows[0]["w1result"]) ? (float?)null : (float?)(double?)dt.Rows[0]["w1result"];
					retObj._w1tara					 = Convert.IsDBNull(dt.Rows[0]["w1tara"]) ? (float?)null : (float?)(double?)dt.Rows[0]["w1tara"];
					retObj._w1brutto					 = Convert.IsDBNull(dt.Rows[0]["w1brutto"]) ? (float?)null : (float?)(double?)dt.Rows[0]["w1brutto"];
					retObj._w1netto					 = Convert.IsDBNull(dt.Rows[0]["w1netto"]) ? (float?)null : (float?)(double?)dt.Rows[0]["w1netto"];
					retObj._w1scale					 = Convert.IsDBNull(dt.Rows[0]["w1scale"]) ? (Int32?)null : (Int32?)dt.Rows[0]["w1scale"];
					retObj._w2time					 = Convert.IsDBNull(dt.Rows[0]["w2time"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["w2time"];
					retObj._w2result					 = Convert.IsDBNull(dt.Rows[0]["w2result"]) ? (float?)null : (float?)(double?)dt.Rows[0]["w2result"];
					retObj._w2tara					 = Convert.IsDBNull(dt.Rows[0]["w2tara"]) ? (float?)null : (float?)(double?)dt.Rows[0]["w2tara"];
					retObj._w2brutto					 = Convert.IsDBNull(dt.Rows[0]["w2brutto"]) ? (float?)null : (float?)(double?)dt.Rows[0]["w2brutto"];
					retObj._w2netto					 = Convert.IsDBNull(dt.Rows[0]["w2netto"]) ? (float?)null : (float?)(double?)dt.Rows[0]["w2netto"];
					retObj._w2scale					 = Convert.IsDBNull(dt.Rows[0]["w2scale"]) ? (Int32?)null : (Int32?)dt.Rows[0]["w2scale"];
					retObj._session					 = Convert.IsDBNull(dt.Rows[0]["session"]) ? (Int32?)null : (Int32?)dt.Rows[0]["session"];
					retObj._receiverid					 = Convert.IsDBNull(dt.Rows[0]["receiverid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["receiverid"];
					retObj._senderid					 = Convert.IsDBNull(dt.Rows[0]["senderid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["senderid"];
					retObj._productid					 = Convert.IsDBNull(dt.Rows[0]["productid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["productid"];
					retObj._operationid					 = Convert.IsDBNull(dt.Rows[0]["operationid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["operationid"];
					retObj._lotnumber					 = Convert.IsDBNull(dt.Rows[0]["lotnumber"]) ? null : (string)dt.Rows[0]["lotnumber"];
					retObj._trailid					 = Convert.IsDBNull(dt.Rows[0]["trailid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["trailid"];
					retObj._minesid					 = Convert.IsDBNull(dt.Rows[0]["minesid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["minesid"];
					retObj._zagrnumber					 = Convert.IsDBNull(dt.Rows[0]["zagrnumber"]) ? null : (string)dt.Rows[0]["zagrnumber"];
					retObj._returnid					 = Convert.IsDBNull(dt.Rows[0]["returnid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["returnid"];
					retObj._userid					 = Convert.IsDBNull(dt.Rows[0]["userid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["userid"];
					retObj._sessionid					 = Convert.IsDBNull(dt.Rows[0]["sessionid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["sessionid"];
					retObj._speed					 = Convert.IsDBNull(dt.Rows[0]["speed"]) ? (float?)null : (float?)(double?)dt.Rows[0]["speed"];
					retObj._nplatf					 = Convert.IsDBNull(dt.Rows[0]["nplatf"]) ? (Int32?)null : (Int32?)dt.Rows[0]["nplatf"];
					retObj._lineid					 = Convert.IsDBNull(dt.Rows[0]["lineid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["lineid"];
					retObj._tvagonid					 = Convert.IsDBNull(dt.Rows[0]["tvagonid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["tvagonid"];
					retObj._vid1					 = Convert.IsDBNull(dt.Rows[0]["vid1"]) ? null : (byte[])dt.Rows[0]["vid1"];
					retObj._vid2					 = Convert.IsDBNull(dt.Rows[0]["vid2"]) ? null : (byte[])dt.Rows[0]["vid2"];
					retObj._vid3					 = Convert.IsDBNull(dt.Rows[0]["vid3"]) ? null : (byte[])dt.Rows[0]["vid3"];
					retObj._pr1					 = Convert.IsDBNull(dt.Rows[0]["pr1"]) ? (Int32?)null : (Int32?)dt.Rows[0]["pr1"];
					retObj._pr2					 = Convert.IsDBNull(dt.Rows[0]["pr2"]) ? (Int32?)null : (Int32?)dt.Rows[0]["pr2"];
					retObj._pr3					 = Convert.IsDBNull(dt.Rows[0]["pr3"]) ? (Int32?)null : (Int32?)dt.Rows[0]["pr3"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table containers based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table containers based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOContainers.
		///</returns>
		///<parameters>
		///Int32? receiverid
		///</parameters>
		public static IList<DAOContainers> SelectAllByReceiverid(Int32? receiverid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByReceiverid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@receiverid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)receiverid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContainers> objList = new List<DAOContainers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContainers retObj = new DAOContainers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._number					 = Convert.IsDBNull(row["number"]) ? null : (string)row["number"];
						retObj._doctara					 = Convert.IsDBNull(row["doctara"]) ? (float?)null : (float?)(double?)row["doctara"];
						retObj._docbrutto					 = Convert.IsDBNull(row["docbrutto"]) ? (float?)null : (float?)(double?)row["docbrutto"];
						retObj._docnetto					 = Convert.IsDBNull(row["docnetto"]) ? (float?)null : (float?)(double?)row["docnetto"];
						retObj._weightcount					 = Convert.IsDBNull(row["weightcount"]) ? (Int32?)null : (Int32?)row["weightcount"];
						retObj._w1time					 = Convert.IsDBNull(row["w1time"]) ? (DateTime?)null : (DateTime?)row["w1time"];
						retObj._w1result					 = Convert.IsDBNull(row["w1result"]) ? (float?)null : (float?)(double?)row["w1result"];
						retObj._w1tara					 = Convert.IsDBNull(row["w1tara"]) ? (float?)null : (float?)(double?)row["w1tara"];
						retObj._w1brutto					 = Convert.IsDBNull(row["w1brutto"]) ? (float?)null : (float?)(double?)row["w1brutto"];
						retObj._w1netto					 = Convert.IsDBNull(row["w1netto"]) ? (float?)null : (float?)(double?)row["w1netto"];
						retObj._w1scale					 = Convert.IsDBNull(row["w1scale"]) ? (Int32?)null : (Int32?)row["w1scale"];
						retObj._w2time					 = Convert.IsDBNull(row["w2time"]) ? (DateTime?)null : (DateTime?)row["w2time"];
						retObj._w2result					 = Convert.IsDBNull(row["w2result"]) ? (float?)null : (float?)(double?)row["w2result"];
						retObj._w2tara					 = Convert.IsDBNull(row["w2tara"]) ? (float?)null : (float?)(double?)row["w2tara"];
						retObj._w2brutto					 = Convert.IsDBNull(row["w2brutto"]) ? (float?)null : (float?)(double?)row["w2brutto"];
						retObj._w2netto					 = Convert.IsDBNull(row["w2netto"]) ? (float?)null : (float?)(double?)row["w2netto"];
						retObj._w2scale					 = Convert.IsDBNull(row["w2scale"]) ? (Int32?)null : (Int32?)row["w2scale"];
						retObj._session					 = Convert.IsDBNull(row["session"]) ? (Int32?)null : (Int32?)row["session"];
						retObj._receiverid					 = Convert.IsDBNull(row["receiverid"]) ? (Int32?)null : (Int32?)row["receiverid"];
						retObj._senderid					 = Convert.IsDBNull(row["senderid"]) ? (Int32?)null : (Int32?)row["senderid"];
						retObj._productid					 = Convert.IsDBNull(row["productid"]) ? (Int32?)null : (Int32?)row["productid"];
						retObj._operationid					 = Convert.IsDBNull(row["operationid"]) ? (Int32?)null : (Int32?)row["operationid"];
						retObj._lotnumber					 = Convert.IsDBNull(row["lotnumber"]) ? null : (string)row["lotnumber"];
						retObj._trailid					 = Convert.IsDBNull(row["trailid"]) ? (Int32?)null : (Int32?)row["trailid"];
						retObj._minesid					 = Convert.IsDBNull(row["minesid"]) ? (Int32?)null : (Int32?)row["minesid"];
						retObj._zagrnumber					 = Convert.IsDBNull(row["zagrnumber"]) ? null : (string)row["zagrnumber"];
						retObj._returnid					 = Convert.IsDBNull(row["returnid"]) ? (Int32?)null : (Int32?)row["returnid"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._sessionid					 = Convert.IsDBNull(row["sessionid"]) ? (Int32?)null : (Int32?)row["sessionid"];
						retObj._speed					 = Convert.IsDBNull(row["speed"]) ? (float?)null : (float?)(double?)row["speed"];
						retObj._nplatf					 = Convert.IsDBNull(row["nplatf"]) ? (Int32?)null : (Int32?)row["nplatf"];
						retObj._lineid					 = Convert.IsDBNull(row["lineid"]) ? (Int32?)null : (Int32?)row["lineid"];
						retObj._tvagonid					 = Convert.IsDBNull(row["tvagonid"]) ? (Int32?)null : (Int32?)row["tvagonid"];
						retObj._vid1					 = Convert.IsDBNull(row["vid1"]) ? null : (byte[])row["vid1"];
						retObj._vid2					 = Convert.IsDBNull(row["vid2"]) ? null : (byte[])row["vid2"];
						retObj._vid3					 = Convert.IsDBNull(row["vid3"]) ? null : (byte[])row["vid3"];
						retObj._pr1					 = Convert.IsDBNull(row["pr1"]) ? (Int32?)null : (Int32?)row["pr1"];
						retObj._pr2					 = Convert.IsDBNull(row["pr2"]) ? (Int32?)null : (Int32?)row["pr2"];
						retObj._pr3					 = Convert.IsDBNull(row["pr3"]) ? (Int32?)null : (Int32?)row["pr3"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? receiverid
		///</parameters>
		public static Int32 SelectAllByReceiveridCount(Int32? receiverid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByReceiveridCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@receiverid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)receiverid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table containers with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? receiverid
		///</parameters>
		public static void DeleteAllByReceiverid(DATACONN0_TxConnectionProvider connectionProvider, Int32? receiverid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_DeleteAllByReceiverid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@receiverid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)receiverid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table containers based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOContainers.
		///</returns>
		///<parameters>
		///Int32? senderid
		///</parameters>
		public static IList<DAOContainers> SelectAllBySenderid(Int32? senderid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllBySenderid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@senderid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)senderid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContainers> objList = new List<DAOContainers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContainers retObj = new DAOContainers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._number					 = Convert.IsDBNull(row["number"]) ? null : (string)row["number"];
						retObj._doctara					 = Convert.IsDBNull(row["doctara"]) ? (float?)null : (float?)(double?)row["doctara"];
						retObj._docbrutto					 = Convert.IsDBNull(row["docbrutto"]) ? (float?)null : (float?)(double?)row["docbrutto"];
						retObj._docnetto					 = Convert.IsDBNull(row["docnetto"]) ? (float?)null : (float?)(double?)row["docnetto"];
						retObj._weightcount					 = Convert.IsDBNull(row["weightcount"]) ? (Int32?)null : (Int32?)row["weightcount"];
						retObj._w1time					 = Convert.IsDBNull(row["w1time"]) ? (DateTime?)null : (DateTime?)row["w1time"];
						retObj._w1result					 = Convert.IsDBNull(row["w1result"]) ? (float?)null : (float?)(double?)row["w1result"];
						retObj._w1tara					 = Convert.IsDBNull(row["w1tara"]) ? (float?)null : (float?)(double?)row["w1tara"];
						retObj._w1brutto					 = Convert.IsDBNull(row["w1brutto"]) ? (float?)null : (float?)(double?)row["w1brutto"];
						retObj._w1netto					 = Convert.IsDBNull(row["w1netto"]) ? (float?)null : (float?)(double?)row["w1netto"];
						retObj._w1scale					 = Convert.IsDBNull(row["w1scale"]) ? (Int32?)null : (Int32?)row["w1scale"];
						retObj._w2time					 = Convert.IsDBNull(row["w2time"]) ? (DateTime?)null : (DateTime?)row["w2time"];
						retObj._w2result					 = Convert.IsDBNull(row["w2result"]) ? (float?)null : (float?)(double?)row["w2result"];
						retObj._w2tara					 = Convert.IsDBNull(row["w2tara"]) ? (float?)null : (float?)(double?)row["w2tara"];
						retObj._w2brutto					 = Convert.IsDBNull(row["w2brutto"]) ? (float?)null : (float?)(double?)row["w2brutto"];
						retObj._w2netto					 = Convert.IsDBNull(row["w2netto"]) ? (float?)null : (float?)(double?)row["w2netto"];
						retObj._w2scale					 = Convert.IsDBNull(row["w2scale"]) ? (Int32?)null : (Int32?)row["w2scale"];
						retObj._session					 = Convert.IsDBNull(row["session"]) ? (Int32?)null : (Int32?)row["session"];
						retObj._receiverid					 = Convert.IsDBNull(row["receiverid"]) ? (Int32?)null : (Int32?)row["receiverid"];
						retObj._senderid					 = Convert.IsDBNull(row["senderid"]) ? (Int32?)null : (Int32?)row["senderid"];
						retObj._productid					 = Convert.IsDBNull(row["productid"]) ? (Int32?)null : (Int32?)row["productid"];
						retObj._operationid					 = Convert.IsDBNull(row["operationid"]) ? (Int32?)null : (Int32?)row["operationid"];
						retObj._lotnumber					 = Convert.IsDBNull(row["lotnumber"]) ? null : (string)row["lotnumber"];
						retObj._trailid					 = Convert.IsDBNull(row["trailid"]) ? (Int32?)null : (Int32?)row["trailid"];
						retObj._minesid					 = Convert.IsDBNull(row["minesid"]) ? (Int32?)null : (Int32?)row["minesid"];
						retObj._zagrnumber					 = Convert.IsDBNull(row["zagrnumber"]) ? null : (string)row["zagrnumber"];
						retObj._returnid					 = Convert.IsDBNull(row["returnid"]) ? (Int32?)null : (Int32?)row["returnid"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._sessionid					 = Convert.IsDBNull(row["sessionid"]) ? (Int32?)null : (Int32?)row["sessionid"];
						retObj._speed					 = Convert.IsDBNull(row["speed"]) ? (float?)null : (float?)(double?)row["speed"];
						retObj._nplatf					 = Convert.IsDBNull(row["nplatf"]) ? (Int32?)null : (Int32?)row["nplatf"];
						retObj._lineid					 = Convert.IsDBNull(row["lineid"]) ? (Int32?)null : (Int32?)row["lineid"];
						retObj._tvagonid					 = Convert.IsDBNull(row["tvagonid"]) ? (Int32?)null : (Int32?)row["tvagonid"];
						retObj._vid1					 = Convert.IsDBNull(row["vid1"]) ? null : (byte[])row["vid1"];
						retObj._vid2					 = Convert.IsDBNull(row["vid2"]) ? null : (byte[])row["vid2"];
						retObj._vid3					 = Convert.IsDBNull(row["vid3"]) ? null : (byte[])row["vid3"];
						retObj._pr1					 = Convert.IsDBNull(row["pr1"]) ? (Int32?)null : (Int32?)row["pr1"];
						retObj._pr2					 = Convert.IsDBNull(row["pr2"]) ? (Int32?)null : (Int32?)row["pr2"];
						retObj._pr3					 = Convert.IsDBNull(row["pr3"]) ? (Int32?)null : (Int32?)row["pr3"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? senderid
		///</parameters>
		public static Int32 SelectAllBySenderidCount(Int32? senderid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllBySenderidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@senderid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)senderid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table containers with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? senderid
		///</parameters>
		public static void DeleteAllBySenderid(DATACONN0_TxConnectionProvider connectionProvider, Int32? senderid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_DeleteAllBySenderid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@senderid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)senderid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table containers based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOContainers.
		///</returns>
		///<parameters>
		///Int32? productid
		///</parameters>
		public static IList<DAOContainers> SelectAllByProductid(Int32? productid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByProductid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@productid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)productid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContainers> objList = new List<DAOContainers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContainers retObj = new DAOContainers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._number					 = Convert.IsDBNull(row["number"]) ? null : (string)row["number"];
						retObj._doctara					 = Convert.IsDBNull(row["doctara"]) ? (float?)null : (float?)(double?)row["doctara"];
						retObj._docbrutto					 = Convert.IsDBNull(row["docbrutto"]) ? (float?)null : (float?)(double?)row["docbrutto"];
						retObj._docnetto					 = Convert.IsDBNull(row["docnetto"]) ? (float?)null : (float?)(double?)row["docnetto"];
						retObj._weightcount					 = Convert.IsDBNull(row["weightcount"]) ? (Int32?)null : (Int32?)row["weightcount"];
						retObj._w1time					 = Convert.IsDBNull(row["w1time"]) ? (DateTime?)null : (DateTime?)row["w1time"];
						retObj._w1result					 = Convert.IsDBNull(row["w1result"]) ? (float?)null : (float?)(double?)row["w1result"];
						retObj._w1tara					 = Convert.IsDBNull(row["w1tara"]) ? (float?)null : (float?)(double?)row["w1tara"];
						retObj._w1brutto					 = Convert.IsDBNull(row["w1brutto"]) ? (float?)null : (float?)(double?)row["w1brutto"];
						retObj._w1netto					 = Convert.IsDBNull(row["w1netto"]) ? (float?)null : (float?)(double?)row["w1netto"];
						retObj._w1scale					 = Convert.IsDBNull(row["w1scale"]) ? (Int32?)null : (Int32?)row["w1scale"];
						retObj._w2time					 = Convert.IsDBNull(row["w2time"]) ? (DateTime?)null : (DateTime?)row["w2time"];
						retObj._w2result					 = Convert.IsDBNull(row["w2result"]) ? (float?)null : (float?)(double?)row["w2result"];
						retObj._w2tara					 = Convert.IsDBNull(row["w2tara"]) ? (float?)null : (float?)(double?)row["w2tara"];
						retObj._w2brutto					 = Convert.IsDBNull(row["w2brutto"]) ? (float?)null : (float?)(double?)row["w2brutto"];
						retObj._w2netto					 = Convert.IsDBNull(row["w2netto"]) ? (float?)null : (float?)(double?)row["w2netto"];
						retObj._w2scale					 = Convert.IsDBNull(row["w2scale"]) ? (Int32?)null : (Int32?)row["w2scale"];
						retObj._session					 = Convert.IsDBNull(row["session"]) ? (Int32?)null : (Int32?)row["session"];
						retObj._receiverid					 = Convert.IsDBNull(row["receiverid"]) ? (Int32?)null : (Int32?)row["receiverid"];
						retObj._senderid					 = Convert.IsDBNull(row["senderid"]) ? (Int32?)null : (Int32?)row["senderid"];
						retObj._productid					 = Convert.IsDBNull(row["productid"]) ? (Int32?)null : (Int32?)row["productid"];
						retObj._operationid					 = Convert.IsDBNull(row["operationid"]) ? (Int32?)null : (Int32?)row["operationid"];
						retObj._lotnumber					 = Convert.IsDBNull(row["lotnumber"]) ? null : (string)row["lotnumber"];
						retObj._trailid					 = Convert.IsDBNull(row["trailid"]) ? (Int32?)null : (Int32?)row["trailid"];
						retObj._minesid					 = Convert.IsDBNull(row["minesid"]) ? (Int32?)null : (Int32?)row["minesid"];
						retObj._zagrnumber					 = Convert.IsDBNull(row["zagrnumber"]) ? null : (string)row["zagrnumber"];
						retObj._returnid					 = Convert.IsDBNull(row["returnid"]) ? (Int32?)null : (Int32?)row["returnid"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._sessionid					 = Convert.IsDBNull(row["sessionid"]) ? (Int32?)null : (Int32?)row["sessionid"];
						retObj._speed					 = Convert.IsDBNull(row["speed"]) ? (float?)null : (float?)(double?)row["speed"];
						retObj._nplatf					 = Convert.IsDBNull(row["nplatf"]) ? (Int32?)null : (Int32?)row["nplatf"];
						retObj._lineid					 = Convert.IsDBNull(row["lineid"]) ? (Int32?)null : (Int32?)row["lineid"];
						retObj._tvagonid					 = Convert.IsDBNull(row["tvagonid"]) ? (Int32?)null : (Int32?)row["tvagonid"];
						retObj._vid1					 = Convert.IsDBNull(row["vid1"]) ? null : (byte[])row["vid1"];
						retObj._vid2					 = Convert.IsDBNull(row["vid2"]) ? null : (byte[])row["vid2"];
						retObj._vid3					 = Convert.IsDBNull(row["vid3"]) ? null : (byte[])row["vid3"];
						retObj._pr1					 = Convert.IsDBNull(row["pr1"]) ? (Int32?)null : (Int32?)row["pr1"];
						retObj._pr2					 = Convert.IsDBNull(row["pr2"]) ? (Int32?)null : (Int32?)row["pr2"];
						retObj._pr3					 = Convert.IsDBNull(row["pr3"]) ? (Int32?)null : (Int32?)row["pr3"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? productid
		///</parameters>
		public static Int32 SelectAllByProductidCount(Int32? productid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByProductidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@productid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)productid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table containers with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? productid
		///</parameters>
		public static void DeleteAllByProductid(DATACONN0_TxConnectionProvider connectionProvider, Int32? productid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_DeleteAllByProductid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@productid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)productid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table containers based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOContainers.
		///</returns>
		///<parameters>
		///Int32? operationid
		///</parameters>
		public static IList<DAOContainers> SelectAllByOperationid(Int32? operationid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByOperationid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@operationid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContainers> objList = new List<DAOContainers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContainers retObj = new DAOContainers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._number					 = Convert.IsDBNull(row["number"]) ? null : (string)row["number"];
						retObj._doctara					 = Convert.IsDBNull(row["doctara"]) ? (float?)null : (float?)(double?)row["doctara"];
						retObj._docbrutto					 = Convert.IsDBNull(row["docbrutto"]) ? (float?)null : (float?)(double?)row["docbrutto"];
						retObj._docnetto					 = Convert.IsDBNull(row["docnetto"]) ? (float?)null : (float?)(double?)row["docnetto"];
						retObj._weightcount					 = Convert.IsDBNull(row["weightcount"]) ? (Int32?)null : (Int32?)row["weightcount"];
						retObj._w1time					 = Convert.IsDBNull(row["w1time"]) ? (DateTime?)null : (DateTime?)row["w1time"];
						retObj._w1result					 = Convert.IsDBNull(row["w1result"]) ? (float?)null : (float?)(double?)row["w1result"];
						retObj._w1tara					 = Convert.IsDBNull(row["w1tara"]) ? (float?)null : (float?)(double?)row["w1tara"];
						retObj._w1brutto					 = Convert.IsDBNull(row["w1brutto"]) ? (float?)null : (float?)(double?)row["w1brutto"];
						retObj._w1netto					 = Convert.IsDBNull(row["w1netto"]) ? (float?)null : (float?)(double?)row["w1netto"];
						retObj._w1scale					 = Convert.IsDBNull(row["w1scale"]) ? (Int32?)null : (Int32?)row["w1scale"];
						retObj._w2time					 = Convert.IsDBNull(row["w2time"]) ? (DateTime?)null : (DateTime?)row["w2time"];
						retObj._w2result					 = Convert.IsDBNull(row["w2result"]) ? (float?)null : (float?)(double?)row["w2result"];
						retObj._w2tara					 = Convert.IsDBNull(row["w2tara"]) ? (float?)null : (float?)(double?)row["w2tara"];
						retObj._w2brutto					 = Convert.IsDBNull(row["w2brutto"]) ? (float?)null : (float?)(double?)row["w2brutto"];
						retObj._w2netto					 = Convert.IsDBNull(row["w2netto"]) ? (float?)null : (float?)(double?)row["w2netto"];
						retObj._w2scale					 = Convert.IsDBNull(row["w2scale"]) ? (Int32?)null : (Int32?)row["w2scale"];
						retObj._session					 = Convert.IsDBNull(row["session"]) ? (Int32?)null : (Int32?)row["session"];
						retObj._receiverid					 = Convert.IsDBNull(row["receiverid"]) ? (Int32?)null : (Int32?)row["receiverid"];
						retObj._senderid					 = Convert.IsDBNull(row["senderid"]) ? (Int32?)null : (Int32?)row["senderid"];
						retObj._productid					 = Convert.IsDBNull(row["productid"]) ? (Int32?)null : (Int32?)row["productid"];
						retObj._operationid					 = Convert.IsDBNull(row["operationid"]) ? (Int32?)null : (Int32?)row["operationid"];
						retObj._lotnumber					 = Convert.IsDBNull(row["lotnumber"]) ? null : (string)row["lotnumber"];
						retObj._trailid					 = Convert.IsDBNull(row["trailid"]) ? (Int32?)null : (Int32?)row["trailid"];
						retObj._minesid					 = Convert.IsDBNull(row["minesid"]) ? (Int32?)null : (Int32?)row["minesid"];
						retObj._zagrnumber					 = Convert.IsDBNull(row["zagrnumber"]) ? null : (string)row["zagrnumber"];
						retObj._returnid					 = Convert.IsDBNull(row["returnid"]) ? (Int32?)null : (Int32?)row["returnid"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._sessionid					 = Convert.IsDBNull(row["sessionid"]) ? (Int32?)null : (Int32?)row["sessionid"];
						retObj._speed					 = Convert.IsDBNull(row["speed"]) ? (float?)null : (float?)(double?)row["speed"];
						retObj._nplatf					 = Convert.IsDBNull(row["nplatf"]) ? (Int32?)null : (Int32?)row["nplatf"];
						retObj._lineid					 = Convert.IsDBNull(row["lineid"]) ? (Int32?)null : (Int32?)row["lineid"];
						retObj._tvagonid					 = Convert.IsDBNull(row["tvagonid"]) ? (Int32?)null : (Int32?)row["tvagonid"];
						retObj._vid1					 = Convert.IsDBNull(row["vid1"]) ? null : (byte[])row["vid1"];
						retObj._vid2					 = Convert.IsDBNull(row["vid2"]) ? null : (byte[])row["vid2"];
						retObj._vid3					 = Convert.IsDBNull(row["vid3"]) ? null : (byte[])row["vid3"];
						retObj._pr1					 = Convert.IsDBNull(row["pr1"]) ? (Int32?)null : (Int32?)row["pr1"];
						retObj._pr2					 = Convert.IsDBNull(row["pr2"]) ? (Int32?)null : (Int32?)row["pr2"];
						retObj._pr3					 = Convert.IsDBNull(row["pr3"]) ? (Int32?)null : (Int32?)row["pr3"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? operationid
		///</parameters>
		public static Int32 SelectAllByOperationidCount(Int32? operationid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByOperationidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@operationid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table containers with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? operationid
		///</parameters>
		public static void DeleteAllByOperationid(DATACONN0_TxConnectionProvider connectionProvider, Int32? operationid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_DeleteAllByOperationid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@operationid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table containers based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOContainers.
		///</returns>
		///<parameters>
		///Int32? trailid
		///</parameters>
		public static IList<DAOContainers> SelectAllByTrailid(Int32? trailid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByTrailid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@trailid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)trailid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContainers> objList = new List<DAOContainers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContainers retObj = new DAOContainers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._number					 = Convert.IsDBNull(row["number"]) ? null : (string)row["number"];
						retObj._doctara					 = Convert.IsDBNull(row["doctara"]) ? (float?)null : (float?)(double?)row["doctara"];
						retObj._docbrutto					 = Convert.IsDBNull(row["docbrutto"]) ? (float?)null : (float?)(double?)row["docbrutto"];
						retObj._docnetto					 = Convert.IsDBNull(row["docnetto"]) ? (float?)null : (float?)(double?)row["docnetto"];
						retObj._weightcount					 = Convert.IsDBNull(row["weightcount"]) ? (Int32?)null : (Int32?)row["weightcount"];
						retObj._w1time					 = Convert.IsDBNull(row["w1time"]) ? (DateTime?)null : (DateTime?)row["w1time"];
						retObj._w1result					 = Convert.IsDBNull(row["w1result"]) ? (float?)null : (float?)(double?)row["w1result"];
						retObj._w1tara					 = Convert.IsDBNull(row["w1tara"]) ? (float?)null : (float?)(double?)row["w1tara"];
						retObj._w1brutto					 = Convert.IsDBNull(row["w1brutto"]) ? (float?)null : (float?)(double?)row["w1brutto"];
						retObj._w1netto					 = Convert.IsDBNull(row["w1netto"]) ? (float?)null : (float?)(double?)row["w1netto"];
						retObj._w1scale					 = Convert.IsDBNull(row["w1scale"]) ? (Int32?)null : (Int32?)row["w1scale"];
						retObj._w2time					 = Convert.IsDBNull(row["w2time"]) ? (DateTime?)null : (DateTime?)row["w2time"];
						retObj._w2result					 = Convert.IsDBNull(row["w2result"]) ? (float?)null : (float?)(double?)row["w2result"];
						retObj._w2tara					 = Convert.IsDBNull(row["w2tara"]) ? (float?)null : (float?)(double?)row["w2tara"];
						retObj._w2brutto					 = Convert.IsDBNull(row["w2brutto"]) ? (float?)null : (float?)(double?)row["w2brutto"];
						retObj._w2netto					 = Convert.IsDBNull(row["w2netto"]) ? (float?)null : (float?)(double?)row["w2netto"];
						retObj._w2scale					 = Convert.IsDBNull(row["w2scale"]) ? (Int32?)null : (Int32?)row["w2scale"];
						retObj._session					 = Convert.IsDBNull(row["session"]) ? (Int32?)null : (Int32?)row["session"];
						retObj._receiverid					 = Convert.IsDBNull(row["receiverid"]) ? (Int32?)null : (Int32?)row["receiverid"];
						retObj._senderid					 = Convert.IsDBNull(row["senderid"]) ? (Int32?)null : (Int32?)row["senderid"];
						retObj._productid					 = Convert.IsDBNull(row["productid"]) ? (Int32?)null : (Int32?)row["productid"];
						retObj._operationid					 = Convert.IsDBNull(row["operationid"]) ? (Int32?)null : (Int32?)row["operationid"];
						retObj._lotnumber					 = Convert.IsDBNull(row["lotnumber"]) ? null : (string)row["lotnumber"];
						retObj._trailid					 = Convert.IsDBNull(row["trailid"]) ? (Int32?)null : (Int32?)row["trailid"];
						retObj._minesid					 = Convert.IsDBNull(row["minesid"]) ? (Int32?)null : (Int32?)row["minesid"];
						retObj._zagrnumber					 = Convert.IsDBNull(row["zagrnumber"]) ? null : (string)row["zagrnumber"];
						retObj._returnid					 = Convert.IsDBNull(row["returnid"]) ? (Int32?)null : (Int32?)row["returnid"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._sessionid					 = Convert.IsDBNull(row["sessionid"]) ? (Int32?)null : (Int32?)row["sessionid"];
						retObj._speed					 = Convert.IsDBNull(row["speed"]) ? (float?)null : (float?)(double?)row["speed"];
						retObj._nplatf					 = Convert.IsDBNull(row["nplatf"]) ? (Int32?)null : (Int32?)row["nplatf"];
						retObj._lineid					 = Convert.IsDBNull(row["lineid"]) ? (Int32?)null : (Int32?)row["lineid"];
						retObj._tvagonid					 = Convert.IsDBNull(row["tvagonid"]) ? (Int32?)null : (Int32?)row["tvagonid"];
						retObj._vid1					 = Convert.IsDBNull(row["vid1"]) ? null : (byte[])row["vid1"];
						retObj._vid2					 = Convert.IsDBNull(row["vid2"]) ? null : (byte[])row["vid2"];
						retObj._vid3					 = Convert.IsDBNull(row["vid3"]) ? null : (byte[])row["vid3"];
						retObj._pr1					 = Convert.IsDBNull(row["pr1"]) ? (Int32?)null : (Int32?)row["pr1"];
						retObj._pr2					 = Convert.IsDBNull(row["pr2"]) ? (Int32?)null : (Int32?)row["pr2"];
						retObj._pr3					 = Convert.IsDBNull(row["pr3"]) ? (Int32?)null : (Int32?)row["pr3"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? trailid
		///</parameters>
		public static Int32 SelectAllByTrailidCount(Int32? trailid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByTrailidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@trailid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)trailid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table containers with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? trailid
		///</parameters>
		public static void DeleteAllByTrailid(DATACONN0_TxConnectionProvider connectionProvider, Int32? trailid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_DeleteAllByTrailid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@trailid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)trailid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table containers based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOContainers.
		///</returns>
		///<parameters>
		///Int32? returnid
		///</parameters>
		public static IList<DAOContainers> SelectAllByReturnid(Int32? returnid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByReturnid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@returnid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)returnid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContainers> objList = new List<DAOContainers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContainers retObj = new DAOContainers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._number					 = Convert.IsDBNull(row["number"]) ? null : (string)row["number"];
						retObj._doctara					 = Convert.IsDBNull(row["doctara"]) ? (float?)null : (float?)(double?)row["doctara"];
						retObj._docbrutto					 = Convert.IsDBNull(row["docbrutto"]) ? (float?)null : (float?)(double?)row["docbrutto"];
						retObj._docnetto					 = Convert.IsDBNull(row["docnetto"]) ? (float?)null : (float?)(double?)row["docnetto"];
						retObj._weightcount					 = Convert.IsDBNull(row["weightcount"]) ? (Int32?)null : (Int32?)row["weightcount"];
						retObj._w1time					 = Convert.IsDBNull(row["w1time"]) ? (DateTime?)null : (DateTime?)row["w1time"];
						retObj._w1result					 = Convert.IsDBNull(row["w1result"]) ? (float?)null : (float?)(double?)row["w1result"];
						retObj._w1tara					 = Convert.IsDBNull(row["w1tara"]) ? (float?)null : (float?)(double?)row["w1tara"];
						retObj._w1brutto					 = Convert.IsDBNull(row["w1brutto"]) ? (float?)null : (float?)(double?)row["w1brutto"];
						retObj._w1netto					 = Convert.IsDBNull(row["w1netto"]) ? (float?)null : (float?)(double?)row["w1netto"];
						retObj._w1scale					 = Convert.IsDBNull(row["w1scale"]) ? (Int32?)null : (Int32?)row["w1scale"];
						retObj._w2time					 = Convert.IsDBNull(row["w2time"]) ? (DateTime?)null : (DateTime?)row["w2time"];
						retObj._w2result					 = Convert.IsDBNull(row["w2result"]) ? (float?)null : (float?)(double?)row["w2result"];
						retObj._w2tara					 = Convert.IsDBNull(row["w2tara"]) ? (float?)null : (float?)(double?)row["w2tara"];
						retObj._w2brutto					 = Convert.IsDBNull(row["w2brutto"]) ? (float?)null : (float?)(double?)row["w2brutto"];
						retObj._w2netto					 = Convert.IsDBNull(row["w2netto"]) ? (float?)null : (float?)(double?)row["w2netto"];
						retObj._w2scale					 = Convert.IsDBNull(row["w2scale"]) ? (Int32?)null : (Int32?)row["w2scale"];
						retObj._session					 = Convert.IsDBNull(row["session"]) ? (Int32?)null : (Int32?)row["session"];
						retObj._receiverid					 = Convert.IsDBNull(row["receiverid"]) ? (Int32?)null : (Int32?)row["receiverid"];
						retObj._senderid					 = Convert.IsDBNull(row["senderid"]) ? (Int32?)null : (Int32?)row["senderid"];
						retObj._productid					 = Convert.IsDBNull(row["productid"]) ? (Int32?)null : (Int32?)row["productid"];
						retObj._operationid					 = Convert.IsDBNull(row["operationid"]) ? (Int32?)null : (Int32?)row["operationid"];
						retObj._lotnumber					 = Convert.IsDBNull(row["lotnumber"]) ? null : (string)row["lotnumber"];
						retObj._trailid					 = Convert.IsDBNull(row["trailid"]) ? (Int32?)null : (Int32?)row["trailid"];
						retObj._minesid					 = Convert.IsDBNull(row["minesid"]) ? (Int32?)null : (Int32?)row["minesid"];
						retObj._zagrnumber					 = Convert.IsDBNull(row["zagrnumber"]) ? null : (string)row["zagrnumber"];
						retObj._returnid					 = Convert.IsDBNull(row["returnid"]) ? (Int32?)null : (Int32?)row["returnid"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._sessionid					 = Convert.IsDBNull(row["sessionid"]) ? (Int32?)null : (Int32?)row["sessionid"];
						retObj._speed					 = Convert.IsDBNull(row["speed"]) ? (float?)null : (float?)(double?)row["speed"];
						retObj._nplatf					 = Convert.IsDBNull(row["nplatf"]) ? (Int32?)null : (Int32?)row["nplatf"];
						retObj._lineid					 = Convert.IsDBNull(row["lineid"]) ? (Int32?)null : (Int32?)row["lineid"];
						retObj._tvagonid					 = Convert.IsDBNull(row["tvagonid"]) ? (Int32?)null : (Int32?)row["tvagonid"];
						retObj._vid1					 = Convert.IsDBNull(row["vid1"]) ? null : (byte[])row["vid1"];
						retObj._vid2					 = Convert.IsDBNull(row["vid2"]) ? null : (byte[])row["vid2"];
						retObj._vid3					 = Convert.IsDBNull(row["vid3"]) ? null : (byte[])row["vid3"];
						retObj._pr1					 = Convert.IsDBNull(row["pr1"]) ? (Int32?)null : (Int32?)row["pr1"];
						retObj._pr2					 = Convert.IsDBNull(row["pr2"]) ? (Int32?)null : (Int32?)row["pr2"];
						retObj._pr3					 = Convert.IsDBNull(row["pr3"]) ? (Int32?)null : (Int32?)row["pr3"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? returnid
		///</parameters>
		public static Int32 SelectAllByReturnidCount(Int32? returnid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByReturnidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@returnid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)returnid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table containers with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? returnid
		///</parameters>
		public static void DeleteAllByReturnid(DATACONN0_TxConnectionProvider connectionProvider, Int32? returnid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_DeleteAllByReturnid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@returnid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)returnid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table containers based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOContainers.
		///</returns>
		///<parameters>
		///Int32? userid
		///</parameters>
		public static IList<DAOContainers> SelectAllByUserid(Int32? userid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByUserid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@userid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContainers> objList = new List<DAOContainers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContainers retObj = new DAOContainers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._number					 = Convert.IsDBNull(row["number"]) ? null : (string)row["number"];
						retObj._doctara					 = Convert.IsDBNull(row["doctara"]) ? (float?)null : (float?)(double?)row["doctara"];
						retObj._docbrutto					 = Convert.IsDBNull(row["docbrutto"]) ? (float?)null : (float?)(double?)row["docbrutto"];
						retObj._docnetto					 = Convert.IsDBNull(row["docnetto"]) ? (float?)null : (float?)(double?)row["docnetto"];
						retObj._weightcount					 = Convert.IsDBNull(row["weightcount"]) ? (Int32?)null : (Int32?)row["weightcount"];
						retObj._w1time					 = Convert.IsDBNull(row["w1time"]) ? (DateTime?)null : (DateTime?)row["w1time"];
						retObj._w1result					 = Convert.IsDBNull(row["w1result"]) ? (float?)null : (float?)(double?)row["w1result"];
						retObj._w1tara					 = Convert.IsDBNull(row["w1tara"]) ? (float?)null : (float?)(double?)row["w1tara"];
						retObj._w1brutto					 = Convert.IsDBNull(row["w1brutto"]) ? (float?)null : (float?)(double?)row["w1brutto"];
						retObj._w1netto					 = Convert.IsDBNull(row["w1netto"]) ? (float?)null : (float?)(double?)row["w1netto"];
						retObj._w1scale					 = Convert.IsDBNull(row["w1scale"]) ? (Int32?)null : (Int32?)row["w1scale"];
						retObj._w2time					 = Convert.IsDBNull(row["w2time"]) ? (DateTime?)null : (DateTime?)row["w2time"];
						retObj._w2result					 = Convert.IsDBNull(row["w2result"]) ? (float?)null : (float?)(double?)row["w2result"];
						retObj._w2tara					 = Convert.IsDBNull(row["w2tara"]) ? (float?)null : (float?)(double?)row["w2tara"];
						retObj._w2brutto					 = Convert.IsDBNull(row["w2brutto"]) ? (float?)null : (float?)(double?)row["w2brutto"];
						retObj._w2netto					 = Convert.IsDBNull(row["w2netto"]) ? (float?)null : (float?)(double?)row["w2netto"];
						retObj._w2scale					 = Convert.IsDBNull(row["w2scale"]) ? (Int32?)null : (Int32?)row["w2scale"];
						retObj._session					 = Convert.IsDBNull(row["session"]) ? (Int32?)null : (Int32?)row["session"];
						retObj._receiverid					 = Convert.IsDBNull(row["receiverid"]) ? (Int32?)null : (Int32?)row["receiverid"];
						retObj._senderid					 = Convert.IsDBNull(row["senderid"]) ? (Int32?)null : (Int32?)row["senderid"];
						retObj._productid					 = Convert.IsDBNull(row["productid"]) ? (Int32?)null : (Int32?)row["productid"];
						retObj._operationid					 = Convert.IsDBNull(row["operationid"]) ? (Int32?)null : (Int32?)row["operationid"];
						retObj._lotnumber					 = Convert.IsDBNull(row["lotnumber"]) ? null : (string)row["lotnumber"];
						retObj._trailid					 = Convert.IsDBNull(row["trailid"]) ? (Int32?)null : (Int32?)row["trailid"];
						retObj._minesid					 = Convert.IsDBNull(row["minesid"]) ? (Int32?)null : (Int32?)row["minesid"];
						retObj._zagrnumber					 = Convert.IsDBNull(row["zagrnumber"]) ? null : (string)row["zagrnumber"];
						retObj._returnid					 = Convert.IsDBNull(row["returnid"]) ? (Int32?)null : (Int32?)row["returnid"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._sessionid					 = Convert.IsDBNull(row["sessionid"]) ? (Int32?)null : (Int32?)row["sessionid"];
						retObj._speed					 = Convert.IsDBNull(row["speed"]) ? (float?)null : (float?)(double?)row["speed"];
						retObj._nplatf					 = Convert.IsDBNull(row["nplatf"]) ? (Int32?)null : (Int32?)row["nplatf"];
						retObj._lineid					 = Convert.IsDBNull(row["lineid"]) ? (Int32?)null : (Int32?)row["lineid"];
						retObj._tvagonid					 = Convert.IsDBNull(row["tvagonid"]) ? (Int32?)null : (Int32?)row["tvagonid"];
						retObj._vid1					 = Convert.IsDBNull(row["vid1"]) ? null : (byte[])row["vid1"];
						retObj._vid2					 = Convert.IsDBNull(row["vid2"]) ? null : (byte[])row["vid2"];
						retObj._vid3					 = Convert.IsDBNull(row["vid3"]) ? null : (byte[])row["vid3"];
						retObj._pr1					 = Convert.IsDBNull(row["pr1"]) ? (Int32?)null : (Int32?)row["pr1"];
						retObj._pr2					 = Convert.IsDBNull(row["pr2"]) ? (Int32?)null : (Int32?)row["pr2"];
						retObj._pr3					 = Convert.IsDBNull(row["pr3"]) ? (Int32?)null : (Int32?)row["pr3"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? userid
		///</parameters>
		public static Int32 SelectAllByUseridCount(Int32? userid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByUseridCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@userid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table containers with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? userid
		///</parameters>
		public static void DeleteAllByUserid(DATACONN0_TxConnectionProvider connectionProvider, Int32? userid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_DeleteAllByUserid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@userid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table containers based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOContainers.
		///</returns>
		///<parameters>
		///Int32? lineid
		///</parameters>
		public static IList<DAOContainers> SelectAllByLineid(Int32? lineid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByLineid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@lineid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)lineid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContainers> objList = new List<DAOContainers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContainers retObj = new DAOContainers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._number					 = Convert.IsDBNull(row["number"]) ? null : (string)row["number"];
						retObj._doctara					 = Convert.IsDBNull(row["doctara"]) ? (float?)null : (float?)(double?)row["doctara"];
						retObj._docbrutto					 = Convert.IsDBNull(row["docbrutto"]) ? (float?)null : (float?)(double?)row["docbrutto"];
						retObj._docnetto					 = Convert.IsDBNull(row["docnetto"]) ? (float?)null : (float?)(double?)row["docnetto"];
						retObj._weightcount					 = Convert.IsDBNull(row["weightcount"]) ? (Int32?)null : (Int32?)row["weightcount"];
						retObj._w1time					 = Convert.IsDBNull(row["w1time"]) ? (DateTime?)null : (DateTime?)row["w1time"];
						retObj._w1result					 = Convert.IsDBNull(row["w1result"]) ? (float?)null : (float?)(double?)row["w1result"];
						retObj._w1tara					 = Convert.IsDBNull(row["w1tara"]) ? (float?)null : (float?)(double?)row["w1tara"];
						retObj._w1brutto					 = Convert.IsDBNull(row["w1brutto"]) ? (float?)null : (float?)(double?)row["w1brutto"];
						retObj._w1netto					 = Convert.IsDBNull(row["w1netto"]) ? (float?)null : (float?)(double?)row["w1netto"];
						retObj._w1scale					 = Convert.IsDBNull(row["w1scale"]) ? (Int32?)null : (Int32?)row["w1scale"];
						retObj._w2time					 = Convert.IsDBNull(row["w2time"]) ? (DateTime?)null : (DateTime?)row["w2time"];
						retObj._w2result					 = Convert.IsDBNull(row["w2result"]) ? (float?)null : (float?)(double?)row["w2result"];
						retObj._w2tara					 = Convert.IsDBNull(row["w2tara"]) ? (float?)null : (float?)(double?)row["w2tara"];
						retObj._w2brutto					 = Convert.IsDBNull(row["w2brutto"]) ? (float?)null : (float?)(double?)row["w2brutto"];
						retObj._w2netto					 = Convert.IsDBNull(row["w2netto"]) ? (float?)null : (float?)(double?)row["w2netto"];
						retObj._w2scale					 = Convert.IsDBNull(row["w2scale"]) ? (Int32?)null : (Int32?)row["w2scale"];
						retObj._session					 = Convert.IsDBNull(row["session"]) ? (Int32?)null : (Int32?)row["session"];
						retObj._receiverid					 = Convert.IsDBNull(row["receiverid"]) ? (Int32?)null : (Int32?)row["receiverid"];
						retObj._senderid					 = Convert.IsDBNull(row["senderid"]) ? (Int32?)null : (Int32?)row["senderid"];
						retObj._productid					 = Convert.IsDBNull(row["productid"]) ? (Int32?)null : (Int32?)row["productid"];
						retObj._operationid					 = Convert.IsDBNull(row["operationid"]) ? (Int32?)null : (Int32?)row["operationid"];
						retObj._lotnumber					 = Convert.IsDBNull(row["lotnumber"]) ? null : (string)row["lotnumber"];
						retObj._trailid					 = Convert.IsDBNull(row["trailid"]) ? (Int32?)null : (Int32?)row["trailid"];
						retObj._minesid					 = Convert.IsDBNull(row["minesid"]) ? (Int32?)null : (Int32?)row["minesid"];
						retObj._zagrnumber					 = Convert.IsDBNull(row["zagrnumber"]) ? null : (string)row["zagrnumber"];
						retObj._returnid					 = Convert.IsDBNull(row["returnid"]) ? (Int32?)null : (Int32?)row["returnid"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._sessionid					 = Convert.IsDBNull(row["sessionid"]) ? (Int32?)null : (Int32?)row["sessionid"];
						retObj._speed					 = Convert.IsDBNull(row["speed"]) ? (float?)null : (float?)(double?)row["speed"];
						retObj._nplatf					 = Convert.IsDBNull(row["nplatf"]) ? (Int32?)null : (Int32?)row["nplatf"];
						retObj._lineid					 = Convert.IsDBNull(row["lineid"]) ? (Int32?)null : (Int32?)row["lineid"];
						retObj._tvagonid					 = Convert.IsDBNull(row["tvagonid"]) ? (Int32?)null : (Int32?)row["tvagonid"];
						retObj._vid1					 = Convert.IsDBNull(row["vid1"]) ? null : (byte[])row["vid1"];
						retObj._vid2					 = Convert.IsDBNull(row["vid2"]) ? null : (byte[])row["vid2"];
						retObj._vid3					 = Convert.IsDBNull(row["vid3"]) ? null : (byte[])row["vid3"];
						retObj._pr1					 = Convert.IsDBNull(row["pr1"]) ? (Int32?)null : (Int32?)row["pr1"];
						retObj._pr2					 = Convert.IsDBNull(row["pr2"]) ? (Int32?)null : (Int32?)row["pr2"];
						retObj._pr3					 = Convert.IsDBNull(row["pr3"]) ? (Int32?)null : (Int32?)row["pr3"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? lineid
		///</parameters>
		public static Int32 SelectAllByLineidCount(Int32? lineid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByLineidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@lineid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)lineid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table containers with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? lineid
		///</parameters>
		public static void DeleteAllByLineid(DATACONN0_TxConnectionProvider connectionProvider, Int32? lineid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_DeleteAllByLineid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@lineid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)lineid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table containers based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOContainers.
		///</returns>
		///<parameters>
		///Int32? tvagonid
		///</parameters>
		public static IList<DAOContainers> SelectAllByTvagonid(Int32? tvagonid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByTvagonid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@tvagonid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)tvagonid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContainers> objList = new List<DAOContainers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContainers retObj = new DAOContainers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._number					 = Convert.IsDBNull(row["number"]) ? null : (string)row["number"];
						retObj._doctara					 = Convert.IsDBNull(row["doctara"]) ? (float?)null : (float?)(double?)row["doctara"];
						retObj._docbrutto					 = Convert.IsDBNull(row["docbrutto"]) ? (float?)null : (float?)(double?)row["docbrutto"];
						retObj._docnetto					 = Convert.IsDBNull(row["docnetto"]) ? (float?)null : (float?)(double?)row["docnetto"];
						retObj._weightcount					 = Convert.IsDBNull(row["weightcount"]) ? (Int32?)null : (Int32?)row["weightcount"];
						retObj._w1time					 = Convert.IsDBNull(row["w1time"]) ? (DateTime?)null : (DateTime?)row["w1time"];
						retObj._w1result					 = Convert.IsDBNull(row["w1result"]) ? (float?)null : (float?)(double?)row["w1result"];
						retObj._w1tara					 = Convert.IsDBNull(row["w1tara"]) ? (float?)null : (float?)(double?)row["w1tara"];
						retObj._w1brutto					 = Convert.IsDBNull(row["w1brutto"]) ? (float?)null : (float?)(double?)row["w1brutto"];
						retObj._w1netto					 = Convert.IsDBNull(row["w1netto"]) ? (float?)null : (float?)(double?)row["w1netto"];
						retObj._w1scale					 = Convert.IsDBNull(row["w1scale"]) ? (Int32?)null : (Int32?)row["w1scale"];
						retObj._w2time					 = Convert.IsDBNull(row["w2time"]) ? (DateTime?)null : (DateTime?)row["w2time"];
						retObj._w2result					 = Convert.IsDBNull(row["w2result"]) ? (float?)null : (float?)(double?)row["w2result"];
						retObj._w2tara					 = Convert.IsDBNull(row["w2tara"]) ? (float?)null : (float?)(double?)row["w2tara"];
						retObj._w2brutto					 = Convert.IsDBNull(row["w2brutto"]) ? (float?)null : (float?)(double?)row["w2brutto"];
						retObj._w2netto					 = Convert.IsDBNull(row["w2netto"]) ? (float?)null : (float?)(double?)row["w2netto"];
						retObj._w2scale					 = Convert.IsDBNull(row["w2scale"]) ? (Int32?)null : (Int32?)row["w2scale"];
						retObj._session					 = Convert.IsDBNull(row["session"]) ? (Int32?)null : (Int32?)row["session"];
						retObj._receiverid					 = Convert.IsDBNull(row["receiverid"]) ? (Int32?)null : (Int32?)row["receiverid"];
						retObj._senderid					 = Convert.IsDBNull(row["senderid"]) ? (Int32?)null : (Int32?)row["senderid"];
						retObj._productid					 = Convert.IsDBNull(row["productid"]) ? (Int32?)null : (Int32?)row["productid"];
						retObj._operationid					 = Convert.IsDBNull(row["operationid"]) ? (Int32?)null : (Int32?)row["operationid"];
						retObj._lotnumber					 = Convert.IsDBNull(row["lotnumber"]) ? null : (string)row["lotnumber"];
						retObj._trailid					 = Convert.IsDBNull(row["trailid"]) ? (Int32?)null : (Int32?)row["trailid"];
						retObj._minesid					 = Convert.IsDBNull(row["minesid"]) ? (Int32?)null : (Int32?)row["minesid"];
						retObj._zagrnumber					 = Convert.IsDBNull(row["zagrnumber"]) ? null : (string)row["zagrnumber"];
						retObj._returnid					 = Convert.IsDBNull(row["returnid"]) ? (Int32?)null : (Int32?)row["returnid"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._sessionid					 = Convert.IsDBNull(row["sessionid"]) ? (Int32?)null : (Int32?)row["sessionid"];
						retObj._speed					 = Convert.IsDBNull(row["speed"]) ? (float?)null : (float?)(double?)row["speed"];
						retObj._nplatf					 = Convert.IsDBNull(row["nplatf"]) ? (Int32?)null : (Int32?)row["nplatf"];
						retObj._lineid					 = Convert.IsDBNull(row["lineid"]) ? (Int32?)null : (Int32?)row["lineid"];
						retObj._tvagonid					 = Convert.IsDBNull(row["tvagonid"]) ? (Int32?)null : (Int32?)row["tvagonid"];
						retObj._vid1					 = Convert.IsDBNull(row["vid1"]) ? null : (byte[])row["vid1"];
						retObj._vid2					 = Convert.IsDBNull(row["vid2"]) ? null : (byte[])row["vid2"];
						retObj._vid3					 = Convert.IsDBNull(row["vid3"]) ? null : (byte[])row["vid3"];
						retObj._pr1					 = Convert.IsDBNull(row["pr1"]) ? (Int32?)null : (Int32?)row["pr1"];
						retObj._pr2					 = Convert.IsDBNull(row["pr2"]) ? (Int32?)null : (Int32?)row["pr2"];
						retObj._pr3					 = Convert.IsDBNull(row["pr3"]) ? (Int32?)null : (Int32?)row["pr3"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? tvagonid
		///</parameters>
		public static Int32 SelectAllByTvagonidCount(Int32? tvagonid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllByTvagonidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@tvagonid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)tvagonid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table containers with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? tvagonid
		///</parameters>
		public static void DeleteAllByTvagonid(DATACONN0_TxConnectionProvider connectionProvider, Int32? tvagonid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_DeleteAllByTvagonid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@tvagonid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)tvagonid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table containers
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new SqlParameter("@number", SqlDbType.VarChar, 12, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_number?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@doctara", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_doctara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@docbrutto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_docbrutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@docnetto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_docnetto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@weightcount", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_weightcount?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1time", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_w1time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1result", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w1result?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1tara", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w1tara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1brutto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w1brutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1netto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w1netto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1scale", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_w1scale?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2time", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_w2time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2result", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w2result?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2tara", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w2tara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2brutto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w2brutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2netto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w2netto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2scale", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_w2scale?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@session", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_session?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@receiverid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_receiverid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@senderid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_senderid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@productid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_productid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@operationid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_operationid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@lotnumber", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_lotnumber?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@trailid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_trailid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@minesid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_minesid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@zagrnumber", SqlDbType.VarChar, 13, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_zagrnumber?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@returnid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_returnid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@userid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@sessionid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_sessionid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@speed", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_speed?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@nplatf", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_nplatf?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@lineid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_lineid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@tvagonid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_tvagonid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid1", SqlDbType.VarBinary, 2147483647, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_vid1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid2", SqlDbType.VarBinary, 2147483647, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_vid2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid3", SqlDbType.VarBinary, 2147483647, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_vid3?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr1", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_pr1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr2", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_pr2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr3", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_pr3?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@id"].Value;
				_number					 = Convert.IsDBNull(command.Parameters["@number"].Value) ? null : (string)command.Parameters["@number"].Value;
				_doctara					 = Convert.IsDBNull(command.Parameters["@doctara"].Value) ? (float?)null : (float?)(double?)command.Parameters["@doctara"].Value;
				_docbrutto					 = Convert.IsDBNull(command.Parameters["@docbrutto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@docbrutto"].Value;
				_docnetto					 = Convert.IsDBNull(command.Parameters["@docnetto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@docnetto"].Value;
				_weightcount					 = Convert.IsDBNull(command.Parameters["@weightcount"].Value) ? (Int32?)null : (Int32?)command.Parameters["@weightcount"].Value;
				_w1time					 = Convert.IsDBNull(command.Parameters["@w1time"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@w1time"].Value;
				_w1result					 = Convert.IsDBNull(command.Parameters["@w1result"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w1result"].Value;
				_w1tara					 = Convert.IsDBNull(command.Parameters["@w1tara"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w1tara"].Value;
				_w1brutto					 = Convert.IsDBNull(command.Parameters["@w1brutto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w1brutto"].Value;
				_w1netto					 = Convert.IsDBNull(command.Parameters["@w1netto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w1netto"].Value;
				_w1scale					 = Convert.IsDBNull(command.Parameters["@w1scale"].Value) ? (Int32?)null : (Int32?)command.Parameters["@w1scale"].Value;
				_w2time					 = Convert.IsDBNull(command.Parameters["@w2time"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@w2time"].Value;
				_w2result					 = Convert.IsDBNull(command.Parameters["@w2result"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w2result"].Value;
				_w2tara					 = Convert.IsDBNull(command.Parameters["@w2tara"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w2tara"].Value;
				_w2brutto					 = Convert.IsDBNull(command.Parameters["@w2brutto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w2brutto"].Value;
				_w2netto					 = Convert.IsDBNull(command.Parameters["@w2netto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w2netto"].Value;
				_w2scale					 = Convert.IsDBNull(command.Parameters["@w2scale"].Value) ? (Int32?)null : (Int32?)command.Parameters["@w2scale"].Value;
				_session					 = Convert.IsDBNull(command.Parameters["@session"].Value) ? (Int32?)null : (Int32?)command.Parameters["@session"].Value;
				_receiverid					 = Convert.IsDBNull(command.Parameters["@receiverid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@receiverid"].Value;
				_senderid					 = Convert.IsDBNull(command.Parameters["@senderid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@senderid"].Value;
				_productid					 = Convert.IsDBNull(command.Parameters["@productid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@productid"].Value;
				_operationid					 = Convert.IsDBNull(command.Parameters["@operationid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@operationid"].Value;
				_lotnumber					 = Convert.IsDBNull(command.Parameters["@lotnumber"].Value) ? null : (string)command.Parameters["@lotnumber"].Value;
				_trailid					 = Convert.IsDBNull(command.Parameters["@trailid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@trailid"].Value;
				_minesid					 = Convert.IsDBNull(command.Parameters["@minesid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@minesid"].Value;
				_zagrnumber					 = Convert.IsDBNull(command.Parameters["@zagrnumber"].Value) ? null : (string)command.Parameters["@zagrnumber"].Value;
				_returnid					 = Convert.IsDBNull(command.Parameters["@returnid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@returnid"].Value;
				_userid					 = Convert.IsDBNull(command.Parameters["@userid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@userid"].Value;
				_sessionid					 = Convert.IsDBNull(command.Parameters["@sessionid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@sessionid"].Value;
				_speed					 = Convert.IsDBNull(command.Parameters["@speed"].Value) ? (float?)null : (float?)(double?)command.Parameters["@speed"].Value;
				_nplatf					 = Convert.IsDBNull(command.Parameters["@nplatf"].Value) ? (Int32?)null : (Int32?)command.Parameters["@nplatf"].Value;
				_lineid					 = Convert.IsDBNull(command.Parameters["@lineid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@lineid"].Value;
				_tvagonid					 = Convert.IsDBNull(command.Parameters["@tvagonid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@tvagonid"].Value;
				_vid1					 = Convert.IsDBNull(command.Parameters["@vid1"].Value) ? null : (byte[])command.Parameters["@vid1"].Value;
				_vid2					 = Convert.IsDBNull(command.Parameters["@vid2"].Value) ? null : (byte[])command.Parameters["@vid2"].Value;
				_vid3					 = Convert.IsDBNull(command.Parameters["@vid3"].Value) ? null : (byte[])command.Parameters["@vid3"].Value;
				_pr1					 = Convert.IsDBNull(command.Parameters["@pr1"].Value) ? (Int32?)null : (Int32?)command.Parameters["@pr1"].Value;
				_pr2					 = Convert.IsDBNull(command.Parameters["@pr2"].Value) ? (Int32?)null : (Int32?)command.Parameters["@pr2"].Value;
				_pr3					 = Convert.IsDBNull(command.Parameters["@pr3"].Value) ? (Int32?)null : (Int32?)command.Parameters["@pr3"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table containers
		///</Summary>
		///<returns>
		///IList-DAOContainers.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOContainers> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContainers> objList = new List<DAOContainers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContainers retObj = new DAOContainers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._number					 = Convert.IsDBNull(row["number"]) ? null : (string)row["number"];
						retObj._doctara					 = Convert.IsDBNull(row["doctara"]) ? (float?)null : (float?)(double?)row["doctara"];
						retObj._docbrutto					 = Convert.IsDBNull(row["docbrutto"]) ? (float?)null : (float?)(double?)row["docbrutto"];
						retObj._docnetto					 = Convert.IsDBNull(row["docnetto"]) ? (float?)null : (float?)(double?)row["docnetto"];
						retObj._weightcount					 = Convert.IsDBNull(row["weightcount"]) ? (Int32?)null : (Int32?)row["weightcount"];
						retObj._w1time					 = Convert.IsDBNull(row["w1time"]) ? (DateTime?)null : (DateTime?)row["w1time"];
						retObj._w1result					 = Convert.IsDBNull(row["w1result"]) ? (float?)null : (float?)(double?)row["w1result"];
						retObj._w1tara					 = Convert.IsDBNull(row["w1tara"]) ? (float?)null : (float?)(double?)row["w1tara"];
						retObj._w1brutto					 = Convert.IsDBNull(row["w1brutto"]) ? (float?)null : (float?)(double?)row["w1brutto"];
						retObj._w1netto					 = Convert.IsDBNull(row["w1netto"]) ? (float?)null : (float?)(double?)row["w1netto"];
						retObj._w1scale					 = Convert.IsDBNull(row["w1scale"]) ? (Int32?)null : (Int32?)row["w1scale"];
						retObj._w2time					 = Convert.IsDBNull(row["w2time"]) ? (DateTime?)null : (DateTime?)row["w2time"];
						retObj._w2result					 = Convert.IsDBNull(row["w2result"]) ? (float?)null : (float?)(double?)row["w2result"];
						retObj._w2tara					 = Convert.IsDBNull(row["w2tara"]) ? (float?)null : (float?)(double?)row["w2tara"];
						retObj._w2brutto					 = Convert.IsDBNull(row["w2brutto"]) ? (float?)null : (float?)(double?)row["w2brutto"];
						retObj._w2netto					 = Convert.IsDBNull(row["w2netto"]) ? (float?)null : (float?)(double?)row["w2netto"];
						retObj._w2scale					 = Convert.IsDBNull(row["w2scale"]) ? (Int32?)null : (Int32?)row["w2scale"];
						retObj._session					 = Convert.IsDBNull(row["session"]) ? (Int32?)null : (Int32?)row["session"];
						retObj._receiverid					 = Convert.IsDBNull(row["receiverid"]) ? (Int32?)null : (Int32?)row["receiverid"];
						retObj._senderid					 = Convert.IsDBNull(row["senderid"]) ? (Int32?)null : (Int32?)row["senderid"];
						retObj._productid					 = Convert.IsDBNull(row["productid"]) ? (Int32?)null : (Int32?)row["productid"];
						retObj._operationid					 = Convert.IsDBNull(row["operationid"]) ? (Int32?)null : (Int32?)row["operationid"];
						retObj._lotnumber					 = Convert.IsDBNull(row["lotnumber"]) ? null : (string)row["lotnumber"];
						retObj._trailid					 = Convert.IsDBNull(row["trailid"]) ? (Int32?)null : (Int32?)row["trailid"];
						retObj._minesid					 = Convert.IsDBNull(row["minesid"]) ? (Int32?)null : (Int32?)row["minesid"];
						retObj._zagrnumber					 = Convert.IsDBNull(row["zagrnumber"]) ? null : (string)row["zagrnumber"];
						retObj._returnid					 = Convert.IsDBNull(row["returnid"]) ? (Int32?)null : (Int32?)row["returnid"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._sessionid					 = Convert.IsDBNull(row["sessionid"]) ? (Int32?)null : (Int32?)row["sessionid"];
						retObj._speed					 = Convert.IsDBNull(row["speed"]) ? (float?)null : (float?)(double?)row["speed"];
						retObj._nplatf					 = Convert.IsDBNull(row["nplatf"]) ? (Int32?)null : (Int32?)row["nplatf"];
						retObj._lineid					 = Convert.IsDBNull(row["lineid"]) ? (Int32?)null : (Int32?)row["lineid"];
						retObj._tvagonid					 = Convert.IsDBNull(row["tvagonid"]) ? (Int32?)null : (Int32?)row["tvagonid"];
						retObj._vid1					 = Convert.IsDBNull(row["vid1"]) ? null : (byte[])row["vid1"];
						retObj._vid2					 = Convert.IsDBNull(row["vid2"]) ? null : (byte[])row["vid2"];
						retObj._vid3					 = Convert.IsDBNull(row["vid3"]) ? null : (byte[])row["vid3"];
						retObj._pr1					 = Convert.IsDBNull(row["pr1"]) ? (Int32?)null : (Int32?)row["pr1"];
						retObj._pr2					 = Convert.IsDBNull(row["pr2"]) ? (Int32?)null : (Int32?)row["pr2"];
						retObj._pr3					 = Convert.IsDBNull(row["pr3"]) ? (Int32?)null : (Int32?)row["pr3"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///IList-DAOContainers.
		///</returns>
		///<parameters>
		///DAOContainers daoContainers
		///</parameters>
		public static IList<DAOContainers> SelectAllBySearchFields(DAOContainers daoContainers)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("containers");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@number", SqlDbType.VarChar, 12, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Number?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@doctara", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.Doctara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@docbrutto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.Docbrutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@docnetto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.Docnetto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@weightcount", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Weightcount?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1time", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1result", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1result?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1tara", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1tara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1brutto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1brutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1netto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1netto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1scale", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1scale?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2time", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2result", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2result?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2tara", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2tara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2brutto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2brutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2netto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2netto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2scale", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2scale?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@session", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Session?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@receiverid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Receiverid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@senderid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Senderid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@productid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Productid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@operationid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Operationid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@lotnumber", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Lotnumber?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@trailid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Trailid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@minesid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Minesid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@zagrnumber", SqlDbType.VarChar, 13, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Zagrnumber?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@returnid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Returnid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@userid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Userid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@sessionid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Sessionid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@speed", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.Speed?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@nplatf", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Nplatf?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@lineid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Lineid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@tvagonid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Tvagonid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid1", SqlDbType.VarBinary, 2147483647, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Vid1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid2", SqlDbType.VarBinary, 2147483647, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Vid2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid3", SqlDbType.VarBinary, 2147483647, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Vid3?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr1", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Pr1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr2", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Pr2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr3", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Pr3?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContainers> objList = new List<DAOContainers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContainers retObj = new DAOContainers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._number					 = Convert.IsDBNull(row["number"]) ? null : (string)row["number"];
						retObj._doctara					 = Convert.IsDBNull(row["doctara"]) ? (float?)null : (float?)(double?)row["doctara"];
						retObj._docbrutto					 = Convert.IsDBNull(row["docbrutto"]) ? (float?)null : (float?)(double?)row["docbrutto"];
						retObj._docnetto					 = Convert.IsDBNull(row["docnetto"]) ? (float?)null : (float?)(double?)row["docnetto"];
						retObj._weightcount					 = Convert.IsDBNull(row["weightcount"]) ? (Int32?)null : (Int32?)row["weightcount"];
						retObj._w1time					 = Convert.IsDBNull(row["w1time"]) ? (DateTime?)null : (DateTime?)row["w1time"];
						retObj._w1result					 = Convert.IsDBNull(row["w1result"]) ? (float?)null : (float?)(double?)row["w1result"];
						retObj._w1tara					 = Convert.IsDBNull(row["w1tara"]) ? (float?)null : (float?)(double?)row["w1tara"];
						retObj._w1brutto					 = Convert.IsDBNull(row["w1brutto"]) ? (float?)null : (float?)(double?)row["w1brutto"];
						retObj._w1netto					 = Convert.IsDBNull(row["w1netto"]) ? (float?)null : (float?)(double?)row["w1netto"];
						retObj._w1scale					 = Convert.IsDBNull(row["w1scale"]) ? (Int32?)null : (Int32?)row["w1scale"];
						retObj._w2time					 = Convert.IsDBNull(row["w2time"]) ? (DateTime?)null : (DateTime?)row["w2time"];
						retObj._w2result					 = Convert.IsDBNull(row["w2result"]) ? (float?)null : (float?)(double?)row["w2result"];
						retObj._w2tara					 = Convert.IsDBNull(row["w2tara"]) ? (float?)null : (float?)(double?)row["w2tara"];
						retObj._w2brutto					 = Convert.IsDBNull(row["w2brutto"]) ? (float?)null : (float?)(double?)row["w2brutto"];
						retObj._w2netto					 = Convert.IsDBNull(row["w2netto"]) ? (float?)null : (float?)(double?)row["w2netto"];
						retObj._w2scale					 = Convert.IsDBNull(row["w2scale"]) ? (Int32?)null : (Int32?)row["w2scale"];
						retObj._session					 = Convert.IsDBNull(row["session"]) ? (Int32?)null : (Int32?)row["session"];
						retObj._receiverid					 = Convert.IsDBNull(row["receiverid"]) ? (Int32?)null : (Int32?)row["receiverid"];
						retObj._senderid					 = Convert.IsDBNull(row["senderid"]) ? (Int32?)null : (Int32?)row["senderid"];
						retObj._productid					 = Convert.IsDBNull(row["productid"]) ? (Int32?)null : (Int32?)row["productid"];
						retObj._operationid					 = Convert.IsDBNull(row["operationid"]) ? (Int32?)null : (Int32?)row["operationid"];
						retObj._lotnumber					 = Convert.IsDBNull(row["lotnumber"]) ? null : (string)row["lotnumber"];
						retObj._trailid					 = Convert.IsDBNull(row["trailid"]) ? (Int32?)null : (Int32?)row["trailid"];
						retObj._minesid					 = Convert.IsDBNull(row["minesid"]) ? (Int32?)null : (Int32?)row["minesid"];
						retObj._zagrnumber					 = Convert.IsDBNull(row["zagrnumber"]) ? null : (string)row["zagrnumber"];
						retObj._returnid					 = Convert.IsDBNull(row["returnid"]) ? (Int32?)null : (Int32?)row["returnid"];
						retObj._userid					 = Convert.IsDBNull(row["userid"]) ? (Int32?)null : (Int32?)row["userid"];
						retObj._sessionid					 = Convert.IsDBNull(row["sessionid"]) ? (Int32?)null : (Int32?)row["sessionid"];
						retObj._speed					 = Convert.IsDBNull(row["speed"]) ? (float?)null : (float?)(double?)row["speed"];
						retObj._nplatf					 = Convert.IsDBNull(row["nplatf"]) ? (Int32?)null : (Int32?)row["nplatf"];
						retObj._lineid					 = Convert.IsDBNull(row["lineid"]) ? (Int32?)null : (Int32?)row["lineid"];
						retObj._tvagonid					 = Convert.IsDBNull(row["tvagonid"]) ? (Int32?)null : (Int32?)row["tvagonid"];
						retObj._vid1					 = Convert.IsDBNull(row["vid1"]) ? null : (byte[])row["vid1"];
						retObj._vid2					 = Convert.IsDBNull(row["vid2"]) ? null : (byte[])row["vid2"];
						retObj._vid3					 = Convert.IsDBNull(row["vid3"]) ? null : (byte[])row["vid3"];
						retObj._pr1					 = Convert.IsDBNull(row["pr1"]) ? (Int32?)null : (Int32?)row["pr1"];
						retObj._pr2					 = Convert.IsDBNull(row["pr2"]) ? (Int32?)null : (Int32?)row["pr2"];
						retObj._pr3					 = Convert.IsDBNull(row["pr3"]) ? (Int32?)null : (Int32?)row["pr3"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOContainers daoContainers
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOContainers daoContainers)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@number", SqlDbType.VarChar, 12, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Number?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@doctara", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.Doctara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@docbrutto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.Docbrutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@docnetto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.Docnetto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@weightcount", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Weightcount?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1time", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1result", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1result?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1tara", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1tara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1brutto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1brutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1netto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1netto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1scale", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.W1scale?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2time", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2result", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2result?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2tara", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2tara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2brutto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2brutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2netto", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2netto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2scale", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.W2scale?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@session", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Session?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@receiverid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Receiverid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@senderid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Senderid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@productid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Productid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@operationid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Operationid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@lotnumber", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Lotnumber?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@trailid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Trailid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@minesid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Minesid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@zagrnumber", SqlDbType.VarChar, 13, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Zagrnumber?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@returnid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Returnid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@userid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Userid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@sessionid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Sessionid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@speed", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoContainers.Speed?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@nplatf", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Nplatf?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@lineid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Lineid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@tvagonid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Tvagonid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid1", SqlDbType.VarBinary, 2147483647, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Vid1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid2", SqlDbType.VarBinary, 2147483647, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Vid2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid3", SqlDbType.VarBinary, 2147483647, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContainers.Vid3?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr1", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Pr1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr2", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Pr2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr3", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoContainers.Pr3?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table containers based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprcontainers_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@number", SqlDbType.VarChar, 12, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_number?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@doctara", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_doctara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@docbrutto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_docbrutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@docnetto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_docnetto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@weightcount", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_weightcount?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1time", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_w1time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1result", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w1result?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1tara", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w1tara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1brutto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w1brutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1netto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w1netto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w1scale", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_w1scale?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2time", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_w2time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2result", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w2result?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2tara", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w2tara?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2brutto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w2brutto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2netto", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_w2netto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@w2scale", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_w2scale?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@session", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_session?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@receiverid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_receiverid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@senderid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_senderid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@productid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_productid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@operationid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_operationid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@lotnumber", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_lotnumber?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@trailid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_trailid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@minesid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_minesid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@zagrnumber", SqlDbType.VarChar, 13, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_zagrnumber?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@returnid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_returnid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@userid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@sessionid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_sessionid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@speed", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_speed?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@nplatf", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_nplatf?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@lineid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_lineid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@tvagonid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_tvagonid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid1", SqlDbType.VarBinary, 2147483647, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_vid1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid2", SqlDbType.VarBinary, 2147483647, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_vid2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@vid3", SqlDbType.VarBinary, 2147483647, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_vid3?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr1", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_pr1?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr2", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_pr2?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@pr3", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_pr3?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@id"].Value;
				_number					 = Convert.IsDBNull(command.Parameters["@number"].Value) ? null : (string)command.Parameters["@number"].Value;
				_doctara					 = Convert.IsDBNull(command.Parameters["@doctara"].Value) ? (float?)null : (float?)(double?)command.Parameters["@doctara"].Value;
				_docbrutto					 = Convert.IsDBNull(command.Parameters["@docbrutto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@docbrutto"].Value;
				_docnetto					 = Convert.IsDBNull(command.Parameters["@docnetto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@docnetto"].Value;
				_weightcount					 = Convert.IsDBNull(command.Parameters["@weightcount"].Value) ? (Int32?)null : (Int32?)command.Parameters["@weightcount"].Value;
				_w1time					 = Convert.IsDBNull(command.Parameters["@w1time"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@w1time"].Value;
				_w1result					 = Convert.IsDBNull(command.Parameters["@w1result"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w1result"].Value;
				_w1tara					 = Convert.IsDBNull(command.Parameters["@w1tara"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w1tara"].Value;
				_w1brutto					 = Convert.IsDBNull(command.Parameters["@w1brutto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w1brutto"].Value;
				_w1netto					 = Convert.IsDBNull(command.Parameters["@w1netto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w1netto"].Value;
				_w1scale					 = Convert.IsDBNull(command.Parameters["@w1scale"].Value) ? (Int32?)null : (Int32?)command.Parameters["@w1scale"].Value;
				_w2time					 = Convert.IsDBNull(command.Parameters["@w2time"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@w2time"].Value;
				_w2result					 = Convert.IsDBNull(command.Parameters["@w2result"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w2result"].Value;
				_w2tara					 = Convert.IsDBNull(command.Parameters["@w2tara"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w2tara"].Value;
				_w2brutto					 = Convert.IsDBNull(command.Parameters["@w2brutto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w2brutto"].Value;
				_w2netto					 = Convert.IsDBNull(command.Parameters["@w2netto"].Value) ? (float?)null : (float?)(double?)command.Parameters["@w2netto"].Value;
				_w2scale					 = Convert.IsDBNull(command.Parameters["@w2scale"].Value) ? (Int32?)null : (Int32?)command.Parameters["@w2scale"].Value;
				_session					 = Convert.IsDBNull(command.Parameters["@session"].Value) ? (Int32?)null : (Int32?)command.Parameters["@session"].Value;
				_receiverid					 = Convert.IsDBNull(command.Parameters["@receiverid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@receiverid"].Value;
				_senderid					 = Convert.IsDBNull(command.Parameters["@senderid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@senderid"].Value;
				_productid					 = Convert.IsDBNull(command.Parameters["@productid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@productid"].Value;
				_operationid					 = Convert.IsDBNull(command.Parameters["@operationid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@operationid"].Value;
				_lotnumber					 = Convert.IsDBNull(command.Parameters["@lotnumber"].Value) ? null : (string)command.Parameters["@lotnumber"].Value;
				_trailid					 = Convert.IsDBNull(command.Parameters["@trailid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@trailid"].Value;
				_minesid					 = Convert.IsDBNull(command.Parameters["@minesid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@minesid"].Value;
				_zagrnumber					 = Convert.IsDBNull(command.Parameters["@zagrnumber"].Value) ? null : (string)command.Parameters["@zagrnumber"].Value;
				_returnid					 = Convert.IsDBNull(command.Parameters["@returnid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@returnid"].Value;
				_userid					 = Convert.IsDBNull(command.Parameters["@userid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@userid"].Value;
				_sessionid					 = Convert.IsDBNull(command.Parameters["@sessionid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@sessionid"].Value;
				_speed					 = Convert.IsDBNull(command.Parameters["@speed"].Value) ? (float?)null : (float?)(double?)command.Parameters["@speed"].Value;
				_nplatf					 = Convert.IsDBNull(command.Parameters["@nplatf"].Value) ? (Int32?)null : (Int32?)command.Parameters["@nplatf"].Value;
				_lineid					 = Convert.IsDBNull(command.Parameters["@lineid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@lineid"].Value;
				_tvagonid					 = Convert.IsDBNull(command.Parameters["@tvagonid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@tvagonid"].Value;
				_vid1					 = Convert.IsDBNull(command.Parameters["@vid1"].Value) ? null : (byte[])command.Parameters["@vid1"].Value;
				_vid2					 = Convert.IsDBNull(command.Parameters["@vid2"].Value) ? null : (byte[])command.Parameters["@vid2"].Value;
				_vid3					 = Convert.IsDBNull(command.Parameters["@vid3"].Value) ? null : (byte[])command.Parameters["@vid3"].Value;
				_pr1					 = Convert.IsDBNull(command.Parameters["@pr1"].Value) ? (Int32?)null : (Int32?)command.Parameters["@pr1"].Value;
				_pr2					 = Convert.IsDBNull(command.Parameters["@pr2"].Value) ? (Int32?)null : (Int32?)command.Parameters["@pr2"].Value;
				_pr3					 = Convert.IsDBNull(command.Parameters["@pr3"].Value) ? (Int32?)null : (Int32?)command.Parameters["@pr3"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public string Number
		{
			get
			{
				return _number;
			}
			set
			{
				_number = value;
			}
		}

		public float? Doctara
		{
			get
			{
				return _doctara;
			}
			set
			{
				_doctara = value;
			}
		}

		public float? Docbrutto
		{
			get
			{
				return _docbrutto;
			}
			set
			{
				_docbrutto = value;
			}
		}

		public float? Docnetto
		{
			get
			{
				return _docnetto;
			}
			set
			{
				_docnetto = value;
			}
		}

		public Int32? Weightcount
		{
			get
			{
				return _weightcount;
			}
			set
			{
				_weightcount = value;
			}
		}

		public DateTime? W1time
		{
			get
			{
				return _w1time;
			}
			set
			{
				_w1time = value;
			}
		}

		public float? W1result
		{
			get
			{
				return _w1result;
			}
			set
			{
				_w1result = value;
			}
		}

		public float? W1tara
		{
			get
			{
				return _w1tara;
			}
			set
			{
				_w1tara = value;
			}
		}

		public float? W1brutto
		{
			get
			{
				return _w1brutto;
			}
			set
			{
				_w1brutto = value;
			}
		}

		public float? W1netto
		{
			get
			{
				return _w1netto;
			}
			set
			{
				_w1netto = value;
			}
		}

		public Int32? W1scale
		{
			get
			{
				return _w1scale;
			}
			set
			{
				_w1scale = value;
			}
		}

		public DateTime? W2time
		{
			get
			{
				return _w2time;
			}
			set
			{
				_w2time = value;
			}
		}

		public float? W2result
		{
			get
			{
				return _w2result;
			}
			set
			{
				_w2result = value;
			}
		}

		public float? W2tara
		{
			get
			{
				return _w2tara;
			}
			set
			{
				_w2tara = value;
			}
		}

		public float? W2brutto
		{
			get
			{
				return _w2brutto;
			}
			set
			{
				_w2brutto = value;
			}
		}

		public float? W2netto
		{
			get
			{
				return _w2netto;
			}
			set
			{
				_w2netto = value;
			}
		}

		public Int32? W2scale
		{
			get
			{
				return _w2scale;
			}
			set
			{
				_w2scale = value;
			}
		}

		public Int32? Session
		{
			get
			{
				return _session;
			}
			set
			{
				_session = value;
			}
		}

		public Int32? Receiverid
		{
			get
			{
				return _receiverid;
			}
			set
			{
				_receiverid = value;
			}
		}

		public Int32? Senderid
		{
			get
			{
				return _senderid;
			}
			set
			{
				_senderid = value;
			}
		}

		public Int32? Productid
		{
			get
			{
				return _productid;
			}
			set
			{
				_productid = value;
			}
		}

		public Int32? Operationid
		{
			get
			{
				return _operationid;
			}
			set
			{
				_operationid = value;
			}
		}

		public string Lotnumber
		{
			get
			{
				return _lotnumber;
			}
			set
			{
				_lotnumber = value;
			}
		}

		public Int32? Trailid
		{
			get
			{
				return _trailid;
			}
			set
			{
				_trailid = value;
			}
		}

		public Int32? Minesid
		{
			get
			{
				return _minesid;
			}
			set
			{
				_minesid = value;
			}
		}

		public string Zagrnumber
		{
			get
			{
				return _zagrnumber;
			}
			set
			{
				_zagrnumber = value;
			}
		}

		public Int32? Returnid
		{
			get
			{
				return _returnid;
			}
			set
			{
				_returnid = value;
			}
		}

		public Int32? Userid
		{
			get
			{
				return _userid;
			}
			set
			{
				_userid = value;
			}
		}

		public Int32? Sessionid
		{
			get
			{
				return _sessionid;
			}
			set
			{
				_sessionid = value;
			}
		}

		public float? Speed
		{
			get
			{
				return _speed;
			}
			set
			{
				_speed = value;
			}
		}

		public Int32? Nplatf
		{
			get
			{
				return _nplatf;
			}
			set
			{
				_nplatf = value;
			}
		}

		public Int32? Lineid
		{
			get
			{
				return _lineid;
			}
			set
			{
				_lineid = value;
			}
		}

		public Int32? Tvagonid
		{
			get
			{
				return _tvagonid;
			}
			set
			{
				_tvagonid = value;
			}
		}

		public byte[] Vid1
		{
			get
			{
				return _vid1;
			}
			set
			{
				_vid1 = value;
			}
		}

		public byte[] Vid2
		{
			get
			{
				return _vid2;
			}
			set
			{
				_vid2 = value;
			}
		}

		public byte[] Vid3
		{
			get
			{
				return _vid3;
			}
			set
			{
				_vid3 = value;
			}
		}

		public Int32? Pr1
		{
			get
			{
				return _pr1;
			}
			set
			{
				_pr1 = value;
			}
		}

		public Int32? Pr2
		{
			get
			{
				return _pr2;
			}
			set
			{
				_pr2 = value;
			}
		}

		public Int32? Pr3
		{
			get
			{
				return _pr3;
			}
			set
			{
				_pr3 = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace Awsd5.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprcontainers_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[id]
			,[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			FROM [dbo].[containers]
			WHERE 
			[id] = @id
			";

		internal static string ctprcontainers_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[containers]
			WHERE 
			[id] = @id
			";

		internal static string ctprcontainers_SelectAllByReceiverid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			FROM [dbo].[containers]
			WHERE 
			[receiverid] = @receiverid OR ([receiverid] IS NULL AND @receiverid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByReceiveridCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[containers]
			WHERE 
			[receiverid] = @receiverid OR ([receiverid] IS NULL AND @receiverid IS NULL)
			";

		internal static string ctprcontainers_DeleteAllByReceiverid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[containers]
			WHERE 
			[receiverid] = @receiverid OR ([receiverid] IS NULL AND @receiverid IS NULL)
			";

		internal static string ctprcontainers_SelectAllBySenderid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			FROM [dbo].[containers]
			WHERE 
			[senderid] = @senderid OR ([senderid] IS NULL AND @senderid IS NULL)
			";

		internal static string ctprcontainers_SelectAllBySenderidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[containers]
			WHERE 
			[senderid] = @senderid OR ([senderid] IS NULL AND @senderid IS NULL)
			";

		internal static string ctprcontainers_DeleteAllBySenderid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[containers]
			WHERE 
			[senderid] = @senderid OR ([senderid] IS NULL AND @senderid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByProductid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			FROM [dbo].[containers]
			WHERE 
			[productid] = @productid OR ([productid] IS NULL AND @productid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByProductidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[containers]
			WHERE 
			[productid] = @productid OR ([productid] IS NULL AND @productid IS NULL)
			";

		internal static string ctprcontainers_DeleteAllByProductid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[containers]
			WHERE 
			[productid] = @productid OR ([productid] IS NULL AND @productid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByOperationid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			FROM [dbo].[containers]
			WHERE 
			[operationid] = @operationid OR ([operationid] IS NULL AND @operationid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByOperationidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[containers]
			WHERE 
			[operationid] = @operationid OR ([operationid] IS NULL AND @operationid IS NULL)
			";

		internal static string ctprcontainers_DeleteAllByOperationid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[containers]
			WHERE 
			[operationid] = @operationid OR ([operationid] IS NULL AND @operationid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByTrailid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			FROM [dbo].[containers]
			WHERE 
			[trailid] = @trailid OR ([trailid] IS NULL AND @trailid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByTrailidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[containers]
			WHERE 
			[trailid] = @trailid OR ([trailid] IS NULL AND @trailid IS NULL)
			";

		internal static string ctprcontainers_DeleteAllByTrailid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[containers]
			WHERE 
			[trailid] = @trailid OR ([trailid] IS NULL AND @trailid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByReturnid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			FROM [dbo].[containers]
			WHERE 
			[returnid] = @returnid OR ([returnid] IS NULL AND @returnid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByReturnidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[containers]
			WHERE 
			[returnid] = @returnid OR ([returnid] IS NULL AND @returnid IS NULL)
			";

		internal static string ctprcontainers_DeleteAllByReturnid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[containers]
			WHERE 
			[returnid] = @returnid OR ([returnid] IS NULL AND @returnid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByUserid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			FROM [dbo].[containers]
			WHERE 
			[userid] = @userid OR ([userid] IS NULL AND @userid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByUseridCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[containers]
			WHERE 
			[userid] = @userid OR ([userid] IS NULL AND @userid IS NULL)
			";

		internal static string ctprcontainers_DeleteAllByUserid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[containers]
			WHERE 
			[userid] = @userid OR ([userid] IS NULL AND @userid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByLineid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			FROM [dbo].[containers]
			WHERE 
			[lineid] = @lineid OR ([lineid] IS NULL AND @lineid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByLineidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[containers]
			WHERE 
			[lineid] = @lineid OR ([lineid] IS NULL AND @lineid IS NULL)
			";

		internal static string ctprcontainers_DeleteAllByLineid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[containers]
			WHERE 
			[lineid] = @lineid OR ([lineid] IS NULL AND @lineid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByTvagonid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			FROM [dbo].[containers]
			WHERE 
			[tvagonid] = @tvagonid OR ([tvagonid] IS NULL AND @tvagonid IS NULL)
			";

		internal static string ctprcontainers_SelectAllByTvagonidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[containers]
			WHERE 
			[tvagonid] = @tvagonid OR ([tvagonid] IS NULL AND @tvagonid IS NULL)
			";

		internal static string ctprcontainers_DeleteAllByTvagonid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[containers]
			WHERE 
			[tvagonid] = @tvagonid OR ([tvagonid] IS NULL AND @tvagonid IS NULL)
			";

		internal static string ctprcontainers_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[containers]
			(
			[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			)
			VALUES
			(
			@number
			,@doctara
			,@docbrutto
			,@docnetto
			,@weightcount
			,@w1time
			,@w1result
			,@w1tara
			,@w1brutto
			,@w1netto
			,@w1scale
			,@w2time
			,@w2result
			,@w2tara
			,@w2brutto
			,@w2netto
			,@w2scale
			,@session
			,@receiverid
			,@senderid
			,@productid
			,@operationid
			,@lotnumber
			,@trailid
			,@minesid
			,@zagrnumber
			,@returnid
			,@userid
			,@sessionid
			,@speed
			,@nplatf
			,@lineid
			,@tvagonid
			,@vid1
			,@vid2
			,@vid3
			,@pr1
			,@pr2
			,@pr3
			)
			SELECT 
			@id = [id]
			,@number = [number]
			,@doctara = [doctara]
			,@docbrutto = [docbrutto]
			,@docnetto = [docnetto]
			,@weightcount = [weightcount]
			,@w1time = [w1time]
			,@w1result = [w1result]
			,@w1tara = [w1tara]
			,@w1brutto = [w1brutto]
			,@w1netto = [w1netto]
			,@w1scale = [w1scale]
			,@w2time = [w2time]
			,@w2result = [w2result]
			,@w2tara = [w2tara]
			,@w2brutto = [w2brutto]
			,@w2netto = [w2netto]
			,@w2scale = [w2scale]
			,@session = [session]
			,@receiverid = [receiverid]
			,@senderid = [senderid]
			,@productid = [productid]
			,@operationid = [operationid]
			,@lotnumber = [lotnumber]
			,@trailid = [trailid]
			,@minesid = [minesid]
			,@zagrnumber = [zagrnumber]
			,@returnid = [returnid]
			,@userid = [userid]
			,@sessionid = [sessionid]
			,@speed = [speed]
			,@nplatf = [nplatf]
			,@lineid = [lineid]
			,@tvagonid = [tvagonid]
			,@vid1 = [vid1]
			,@vid2 = [vid2]
			,@vid3 = [vid3]
			,@pr1 = [pr1]
			,@pr2 = [pr2]
			,@pr3 = [pr3]
			FROM [dbo].[containers]
			WHERE 
			id = SCOPE_IDENTITY()
			";

		internal static string ctprcontainers_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[id]
			,[number]
			,[doctara]
			,[docbrutto]
			,[docnetto]
			,[weightcount]
			,[w1time]
			,[w1result]
			,[w1tara]
			,[w1brutto]
			,[w1netto]
			,[w1scale]
			,[w2time]
			,[w2result]
			,[w2tara]
			,[w2brutto]
			,[w2netto]
			,[w2scale]
			,[session]
			,[receiverid]
			,[senderid]
			,[productid]
			,[operationid]
			,[lotnumber]
			,[trailid]
			,[minesid]
			,[zagrnumber]
			,[returnid]
			,[userid]
			,[sessionid]
			,[speed]
			,[nplatf]
			,[lineid]
			,[tvagonid]
			,[vid1]
			,[vid2]
			,[vid3]
			,[pr1]
			,[pr2]
			,[pr3]
			FROM [dbo].[containers]
			";

		internal static string ctprcontainers_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[containers]
			";

		internal static string ctprcontainers_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[id],
			[number],
			[doctara],
			[docbrutto],
			[docnetto],
			[weightcount],
			[w1time],
			[w1result],
			[w1tara],
			[w1brutto],
			[w1netto],
			[w1scale],
			[w2time],
			[w2result],
			[w2tara],
			[w2brutto],
			[w2netto],
			[w2scale],
			[session],
			[receiverid],
			[senderid],
			[productid],
			[operationid],
			[lotnumber],
			[trailid],
			[minesid],
			[zagrnumber],
			[returnid],
			[userid],
			[sessionid],
			[speed],
			[nplatf],
			[lineid],
			[tvagonid],
			[vid1],
			[vid2],
			[vid3],
			[pr1],
			[pr2],
			[pr3]
			FROM [dbo].[containers]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([number] LIKE @number OR @number is null)
			AND ([doctara] LIKE @doctara OR @doctara is null)
			AND ([docbrutto] LIKE @docbrutto OR @docbrutto is null)
			AND ([docnetto] LIKE @docnetto OR @docnetto is null)
			AND ([weightcount] LIKE @weightcount OR @weightcount is null)
			AND ([w1time] LIKE @w1time OR @w1time is null)
			AND ([w1result] LIKE @w1result OR @w1result is null)
			AND ([w1tara] LIKE @w1tara OR @w1tara is null)
			AND ([w1brutto] LIKE @w1brutto OR @w1brutto is null)
			AND ([w1netto] LIKE @w1netto OR @w1netto is null)
			AND ([w1scale] LIKE @w1scale OR @w1scale is null)
			AND ([w2time] LIKE @w2time OR @w2time is null)
			AND ([w2result] LIKE @w2result OR @w2result is null)
			AND ([w2tara] LIKE @w2tara OR @w2tara is null)
			AND ([w2brutto] LIKE @w2brutto OR @w2brutto is null)
			AND ([w2netto] LIKE @w2netto OR @w2netto is null)
			AND ([w2scale] LIKE @w2scale OR @w2scale is null)
			AND ([session] LIKE @session OR @session is null)
			AND ([receiverid] LIKE @receiverid OR @receiverid is null)
			AND ([senderid] LIKE @senderid OR @senderid is null)
			AND ([productid] LIKE @productid OR @productid is null)
			AND ([operationid] LIKE @operationid OR @operationid is null)
			AND ([lotnumber] LIKE @lotnumber OR @lotnumber is null)
			AND ([trailid] LIKE @trailid OR @trailid is null)
			AND ([minesid] LIKE @minesid OR @minesid is null)
			AND ([zagrnumber] LIKE @zagrnumber OR @zagrnumber is null)
			AND ([returnid] LIKE @returnid OR @returnid is null)
			AND ([userid] LIKE @userid OR @userid is null)
			AND ([sessionid] LIKE @sessionid OR @sessionid is null)
			AND ([speed] LIKE @speed OR @speed is null)
			AND ([nplatf] LIKE @nplatf OR @nplatf is null)
			AND ([lineid] LIKE @lineid OR @lineid is null)
			AND ([tvagonid] LIKE @tvagonid OR @tvagonid is null)
			AND ([vid1] LIKE @vid1 OR @vid1 is null)
			AND ([vid2] LIKE @vid2 OR @vid2 is null)
			AND ([vid3] LIKE @vid3 OR @vid3 is null)
			AND ([pr1] LIKE @pr1 OR @pr1 is null)
			AND ([pr2] LIKE @pr2 OR @pr2 is null)
			AND ([pr3] LIKE @pr3 OR @pr3 is null)
			";

		internal static string ctprcontainers_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[containers]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([number] LIKE @number OR @number is null)
			AND ([doctara] LIKE @doctara OR @doctara is null)
			AND ([docbrutto] LIKE @docbrutto OR @docbrutto is null)
			AND ([docnetto] LIKE @docnetto OR @docnetto is null)
			AND ([weightcount] LIKE @weightcount OR @weightcount is null)
			AND ([w1time] LIKE @w1time OR @w1time is null)
			AND ([w1result] LIKE @w1result OR @w1result is null)
			AND ([w1tara] LIKE @w1tara OR @w1tara is null)
			AND ([w1brutto] LIKE @w1brutto OR @w1brutto is null)
			AND ([w1netto] LIKE @w1netto OR @w1netto is null)
			AND ([w1scale] LIKE @w1scale OR @w1scale is null)
			AND ([w2time] LIKE @w2time OR @w2time is null)
			AND ([w2result] LIKE @w2result OR @w2result is null)
			AND ([w2tara] LIKE @w2tara OR @w2tara is null)
			AND ([w2brutto] LIKE @w2brutto OR @w2brutto is null)
			AND ([w2netto] LIKE @w2netto OR @w2netto is null)
			AND ([w2scale] LIKE @w2scale OR @w2scale is null)
			AND ([session] LIKE @session OR @session is null)
			AND ([receiverid] LIKE @receiverid OR @receiverid is null)
			AND ([senderid] LIKE @senderid OR @senderid is null)
			AND ([productid] LIKE @productid OR @productid is null)
			AND ([operationid] LIKE @operationid OR @operationid is null)
			AND ([lotnumber] LIKE @lotnumber OR @lotnumber is null)
			AND ([trailid] LIKE @trailid OR @trailid is null)
			AND ([minesid] LIKE @minesid OR @minesid is null)
			AND ([zagrnumber] LIKE @zagrnumber OR @zagrnumber is null)
			AND ([returnid] LIKE @returnid OR @returnid is null)
			AND ([userid] LIKE @userid OR @userid is null)
			AND ([sessionid] LIKE @sessionid OR @sessionid is null)
			AND ([speed] LIKE @speed OR @speed is null)
			AND ([nplatf] LIKE @nplatf OR @nplatf is null)
			AND ([lineid] LIKE @lineid OR @lineid is null)
			AND ([tvagonid] LIKE @tvagonid OR @tvagonid is null)
			AND ([vid1] LIKE @vid1 OR @vid1 is null)
			AND ([vid2] LIKE @vid2 OR @vid2 is null)
			AND ([vid3] LIKE @vid3 OR @vid3 is null)
			AND ([pr1] LIKE @pr1 OR @pr1 is null)
			AND ([pr2] LIKE @pr2 OR @pr2 is null)
			AND ([pr3] LIKE @pr3 OR @pr3 is null)
			";

		internal static string ctprcontainers_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[containers]
			SET
			[number] = @number
			,[doctara] = @doctara
			,[docbrutto] = @docbrutto
			,[docnetto] = @docnetto
			,[weightcount] = @weightcount
			,[w1time] = @w1time
			,[w1result] = @w1result
			,[w1tara] = @w1tara
			,[w1brutto] = @w1brutto
			,[w1netto] = @w1netto
			,[w1scale] = @w1scale
			,[w2time] = @w2time
			,[w2result] = @w2result
			,[w2tara] = @w2tara
			,[w2brutto] = @w2brutto
			,[w2netto] = @w2netto
			,[w2scale] = @w2scale
			,[session] = @session
			,[receiverid] = @receiverid
			,[senderid] = @senderid
			,[productid] = @productid
			,[operationid] = @operationid
			,[lotnumber] = @lotnumber
			,[trailid] = @trailid
			,[minesid] = @minesid
			,[zagrnumber] = @zagrnumber
			,[returnid] = @returnid
			,[userid] = @userid
			,[sessionid] = @sessionid
			,[speed] = @speed
			,[nplatf] = @nplatf
			,[lineid] = @lineid
			,[tvagonid] = @tvagonid
			,[vid1] = @vid1
			,[vid2] = @vid2
			,[vid3] = @vid3
			,[pr1] = @pr1
			,[pr2] = @pr2
			,[pr3] = @pr3
			WHERE 
			[id] = @id
			SELECT 
			@id = [id]
			,@number = [number]
			,@doctara = [doctara]
			,@docbrutto = [docbrutto]
			,@docnetto = [docnetto]
			,@weightcount = [weightcount]
			,@w1time = [w1time]
			,@w1result = [w1result]
			,@w1tara = [w1tara]
			,@w1brutto = [w1brutto]
			,@w1netto = [w1netto]
			,@w1scale = [w1scale]
			,@w2time = [w2time]
			,@w2result = [w2result]
			,@w2tara = [w2tara]
			,@w2brutto = [w2brutto]
			,@w2netto = [w2netto]
			,@w2scale = [w2scale]
			,@session = [session]
			,@receiverid = [receiverid]
			,@senderid = [senderid]
			,@productid = [productid]
			,@operationid = [operationid]
			,@lotnumber = [lotnumber]
			,@trailid = [trailid]
			,@minesid = [minesid]
			,@zagrnumber = [zagrnumber]
			,@returnid = [returnid]
			,@userid = [userid]
			,@sessionid = [sessionid]
			,@speed = [speed]
			,@nplatf = [nplatf]
			,@lineid = [lineid]
			,@tvagonid = [tvagonid]
			,@vid1 = [vid1]
			,@vid2 = [vid2]
			,@vid3 = [vid3]
			,@pr1 = [pr1]
			,@pr2 = [pr2]
			,@pr3 = [pr3]
			FROM [dbo].[containers]
			WHERE 
			[id] = @id
			";

	}
}
#endregion
