/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 27.06.2018 13:13:07
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace Awsd5.DataObjects
{
	public partial class DAOUsers : DATACONN0_BaseData
	{
		#region member variables
		protected Int32? _id;
		protected Int64? _externalid;
		protected string _firstname;
		protected string _secondnane;
		protected string _login;
		protected string _middlename;
		protected Int32? _usertypeid;
		#endregion

		#region class methods
		public DAOUsers()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table users based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOUsers
		///</returns>
		///<parameters>
		///Int32? id
		///</parameters>
		public static DAOUsers SelectOne(Int32? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprusers_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("users");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOUsers retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOUsers();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["id"];
					retObj._externalid					 = Convert.IsDBNull(dt.Rows[0]["externalid"]) ? (Int64?)null : (Int64?)dt.Rows[0]["externalid"];
					retObj._firstname					 = Convert.IsDBNull(dt.Rows[0]["firstname"]) ? null : (string)dt.Rows[0]["firstname"];
					retObj._secondnane					 = Convert.IsDBNull(dt.Rows[0]["secondnane"]) ? null : (string)dt.Rows[0]["secondnane"];
					retObj._login					 = Convert.IsDBNull(dt.Rows[0]["login"]) ? null : (string)dt.Rows[0]["login"];
					retObj._middlename					 = Convert.IsDBNull(dt.Rows[0]["middlename"]) ? null : (string)dt.Rows[0]["middlename"];
					retObj._usertypeid					 = Convert.IsDBNull(dt.Rows[0]["usertypeid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["usertypeid"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table users based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprusers_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table users based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOUsers.
		///</returns>
		///<parameters>
		///Int32? usertypeid
		///</parameters>
		public static IList<DAOUsers> SelectAllByUsertypeid(Int32? usertypeid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprusers_SelectAllByUsertypeid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("users");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@usertypeid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)usertypeid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOUsers> objList = new List<DAOUsers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOUsers retObj = new DAOUsers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._externalid					 = Convert.IsDBNull(row["externalid"]) ? (Int64?)null : (Int64?)row["externalid"];
						retObj._firstname					 = Convert.IsDBNull(row["firstname"]) ? null : (string)row["firstname"];
						retObj._secondnane					 = Convert.IsDBNull(row["secondnane"]) ? null : (string)row["secondnane"];
						retObj._login					 = Convert.IsDBNull(row["login"]) ? null : (string)row["login"];
						retObj._middlename					 = Convert.IsDBNull(row["middlename"]) ? null : (string)row["middlename"];
						retObj._usertypeid					 = Convert.IsDBNull(row["usertypeid"]) ? (Int32?)null : (Int32?)row["usertypeid"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? usertypeid
		///</parameters>
		public static Int32 SelectAllByUsertypeidCount(Int32? usertypeid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprusers_SelectAllByUsertypeidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@usertypeid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)usertypeid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table users with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? usertypeid
		///</parameters>
		public static void DeleteAllByUsertypeid(DATACONN0_TxConnectionProvider connectionProvider, Int32? usertypeid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprusers_DeleteAllByUsertypeid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@usertypeid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)usertypeid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table users
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprusers_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new SqlParameter("@externalid", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_externalid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@firstname", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_firstname?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@secondnane", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_secondnane?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@login", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_login?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@middlename", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_middlename?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@usertypeid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_usertypeid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@id"].Value;
				_externalid					 = Convert.IsDBNull(command.Parameters["@externalid"].Value) ? (Int64?)null : (Int64?)command.Parameters["@externalid"].Value;
				_firstname					 = Convert.IsDBNull(command.Parameters["@firstname"].Value) ? null : (string)command.Parameters["@firstname"].Value;
				_secondnane					 = Convert.IsDBNull(command.Parameters["@secondnane"].Value) ? null : (string)command.Parameters["@secondnane"].Value;
				_login					 = Convert.IsDBNull(command.Parameters["@login"].Value) ? null : (string)command.Parameters["@login"].Value;
				_middlename					 = Convert.IsDBNull(command.Parameters["@middlename"].Value) ? null : (string)command.Parameters["@middlename"].Value;
				_usertypeid					 = Convert.IsDBNull(command.Parameters["@usertypeid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@usertypeid"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table users
		///</Summary>
		///<returns>
		///IList-DAOUsers.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOUsers> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprusers_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("users");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOUsers> objList = new List<DAOUsers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOUsers retObj = new DAOUsers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._externalid					 = Convert.IsDBNull(row["externalid"]) ? (Int64?)null : (Int64?)row["externalid"];
						retObj._firstname					 = Convert.IsDBNull(row["firstname"]) ? null : (string)row["firstname"];
						retObj._secondnane					 = Convert.IsDBNull(row["secondnane"]) ? null : (string)row["secondnane"];
						retObj._login					 = Convert.IsDBNull(row["login"]) ? null : (string)row["login"];
						retObj._middlename					 = Convert.IsDBNull(row["middlename"]) ? null : (string)row["middlename"];
						retObj._usertypeid					 = Convert.IsDBNull(row["usertypeid"]) ? (Int32?)null : (Int32?)row["usertypeid"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprusers_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///IList-DAOUsers.
		///</returns>
		///<parameters>
		///DAOUsers daoUsers
		///</parameters>
		public static IList<DAOUsers> SelectAllBySearchFields(DAOUsers daoUsers)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprusers_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("users");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoUsers.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@externalid", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)daoUsers.Externalid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@firstname", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoUsers.Firstname?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@secondnane", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoUsers.Secondnane?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@login", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoUsers.Login?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@middlename", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoUsers.Middlename?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@usertypeid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoUsers.Usertypeid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOUsers> objList = new List<DAOUsers>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOUsers retObj = new DAOUsers();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._externalid					 = Convert.IsDBNull(row["externalid"]) ? (Int64?)null : (Int64?)row["externalid"];
						retObj._firstname					 = Convert.IsDBNull(row["firstname"]) ? null : (string)row["firstname"];
						retObj._secondnane					 = Convert.IsDBNull(row["secondnane"]) ? null : (string)row["secondnane"];
						retObj._login					 = Convert.IsDBNull(row["login"]) ? null : (string)row["login"];
						retObj._middlename					 = Convert.IsDBNull(row["middlename"]) ? null : (string)row["middlename"];
						retObj._usertypeid					 = Convert.IsDBNull(row["usertypeid"]) ? (Int32?)null : (Int32?)row["usertypeid"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOUsers daoUsers
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOUsers daoUsers)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprusers_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoUsers.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@externalid", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)daoUsers.Externalid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@firstname", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoUsers.Firstname?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@secondnane", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoUsers.Secondnane?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@login", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoUsers.Login?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@middlename", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoUsers.Middlename?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@usertypeid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoUsers.Usertypeid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table users based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprusers_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@externalid", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_externalid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@firstname", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_firstname?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@secondnane", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_secondnane?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@login", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_login?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@middlename", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_middlename?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@usertypeid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_usertypeid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@id"].Value;
				_externalid					 = Convert.IsDBNull(command.Parameters["@externalid"].Value) ? (Int64?)null : (Int64?)command.Parameters["@externalid"].Value;
				_firstname					 = Convert.IsDBNull(command.Parameters["@firstname"].Value) ? null : (string)command.Parameters["@firstname"].Value;
				_secondnane					 = Convert.IsDBNull(command.Parameters["@secondnane"].Value) ? null : (string)command.Parameters["@secondnane"].Value;
				_login					 = Convert.IsDBNull(command.Parameters["@login"].Value) ? null : (string)command.Parameters["@login"].Value;
				_middlename					 = Convert.IsDBNull(command.Parameters["@middlename"].Value) ? null : (string)command.Parameters["@middlename"].Value;
				_usertypeid					 = Convert.IsDBNull(command.Parameters["@usertypeid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@usertypeid"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public Int64? Externalid
		{
			get
			{
				return _externalid;
			}
			set
			{
				_externalid = value;
			}
		}

		public string Firstname
		{
			get
			{
				return _firstname;
			}
			set
			{
				_firstname = value;
			}
		}

		public string Secondnane
		{
			get
			{
				return _secondnane;
			}
			set
			{
				_secondnane = value;
			}
		}

		public string Login
		{
			get
			{
				return _login;
			}
			set
			{
				_login = value;
			}
		}

		public string Middlename
		{
			get
			{
				return _middlename;
			}
			set
			{
				_middlename = value;
			}
		}

		public Int32? Usertypeid
		{
			get
			{
				return _usertypeid;
			}
			set
			{
				_usertypeid = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace Awsd5.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprusers_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[id]
			,[externalid]
			,[firstname]
			,[secondnane]
			,[login]
			,[middlename]
			,[usertypeid]
			FROM [dbo].[users]
			WHERE 
			[id] = @id
			";

		internal static string ctprusers_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[users]
			WHERE 
			[id] = @id
			";

		internal static string ctprusers_SelectAllByUsertypeid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[externalid]
			,[firstname]
			,[secondnane]
			,[login]
			,[middlename]
			,[usertypeid]
			FROM [dbo].[users]
			WHERE 
			[usertypeid] = @usertypeid OR ([usertypeid] IS NULL AND @usertypeid IS NULL)
			";

		internal static string ctprusers_SelectAllByUsertypeidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[users]
			WHERE 
			[usertypeid] = @usertypeid OR ([usertypeid] IS NULL AND @usertypeid IS NULL)
			";

		internal static string ctprusers_DeleteAllByUsertypeid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[users]
			WHERE 
			[usertypeid] = @usertypeid OR ([usertypeid] IS NULL AND @usertypeid IS NULL)
			";

		internal static string ctprusers_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[users]
			(
			[externalid]
			,[firstname]
			,[secondnane]
			,[login]
			,[middlename]
			,[usertypeid]
			)
			VALUES
			(
			@externalid
			,@firstname
			,@secondnane
			,@login
			,@middlename
			,@usertypeid
			)
			SELECT 
			@id = [id]
			,@externalid = [externalid]
			,@firstname = [firstname]
			,@secondnane = [secondnane]
			,@login = [login]
			,@middlename = [middlename]
			,@usertypeid = [usertypeid]
			FROM [dbo].[users]
			WHERE 
			id = SCOPE_IDENTITY()
			";

		internal static string ctprusers_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[id]
			,[externalid]
			,[firstname]
			,[secondnane]
			,[login]
			,[middlename]
			,[usertypeid]
			FROM [dbo].[users]
			";

		internal static string ctprusers_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[users]
			";

		internal static string ctprusers_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[id],
			[externalid],
			[firstname],
			[secondnane],
			[login],
			[middlename],
			[usertypeid]
			FROM [dbo].[users]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([externalid] LIKE @externalid OR @externalid is null)
			AND ([firstname] LIKE @firstname OR @firstname is null)
			AND ([secondnane] LIKE @secondnane OR @secondnane is null)
			AND ([login] LIKE @login OR @login is null)
			AND ([middlename] LIKE @middlename OR @middlename is null)
			AND ([usertypeid] LIKE @usertypeid OR @usertypeid is null)
			";

		internal static string ctprusers_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[users]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([externalid] LIKE @externalid OR @externalid is null)
			AND ([firstname] LIKE @firstname OR @firstname is null)
			AND ([secondnane] LIKE @secondnane OR @secondnane is null)
			AND ([login] LIKE @login OR @login is null)
			AND ([middlename] LIKE @middlename OR @middlename is null)
			AND ([usertypeid] LIKE @usertypeid OR @usertypeid is null)
			";

		internal static string ctprusers_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[users]
			SET
			[externalid] = @externalid
			,[firstname] = @firstname
			,[secondnane] = @secondnane
			,[login] = @login
			,[middlename] = @middlename
			,[usertypeid] = @usertypeid
			WHERE 
			[id] = @id
			SELECT 
			@id = [id]
			,@externalid = [externalid]
			,@firstname = [firstname]
			,@secondnane = [secondnane]
			,@login = [login]
			,@middlename = [middlename]
			,@usertypeid = [usertypeid]
			FROM [dbo].[users]
			WHERE 
			[id] = @id
			";

	}
}
#endregion
